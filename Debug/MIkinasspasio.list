
MIkinasspasio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036c0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08003780  08003780  00004780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b0  080037b0  00005030  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080037b0  080037b0  00005030  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080037b0  080037b0  00005030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037b0  080037b0  000047b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037b4  080037b4  000047b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000030  20000000  080037b8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000030  080037e8  00005030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  080037e8  0000513c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000082ac  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018cc  00000000  00000000  0000d304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0000ebd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000750  00000000  00000000  0000f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f866  00000000  00000000  0000fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba6b  00000000  00000000  0001f4fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005f3c7  00000000  00000000  0002af69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0008a330  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002180  00000000  00000000  0008a374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0008c4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000030 	.word	0x20000030
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003768 	.word	0x08003768

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000034 	.word	0x20000034
 8000104:	08003768 	.word	0x08003768

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b089      	sub	sp, #36	@ 0x24
 80003f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003fa:	240c      	movs	r4, #12
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2314      	movs	r3, #20
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 f983 	bl	8003710 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040a:	4b43      	ldr	r3, [pc, #268]	@ (8000518 <MX_GPIO_Init+0x124>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	4b42      	ldr	r3, [pc, #264]	@ (8000518 <MX_GPIO_Init+0x124>)
 8000410:	2180      	movs	r1, #128	@ 0x80
 8000412:	0289      	lsls	r1, r1, #10
 8000414:	430a      	orrs	r2, r1
 8000416:	615a      	str	r2, [r3, #20]
 8000418:	4b3f      	ldr	r3, [pc, #252]	@ (8000518 <MX_GPIO_Init+0x124>)
 800041a:	695a      	ldr	r2, [r3, #20]
 800041c:	2380      	movs	r3, #128	@ 0x80
 800041e:	029b      	lsls	r3, r3, #10
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b3c      	ldr	r3, [pc, #240]	@ (8000518 <MX_GPIO_Init+0x124>)
 8000428:	695a      	ldr	r2, [r3, #20]
 800042a:	4b3b      	ldr	r3, [pc, #236]	@ (8000518 <MX_GPIO_Init+0x124>)
 800042c:	2180      	movs	r1, #128	@ 0x80
 800042e:	02c9      	lsls	r1, r1, #11
 8000430:	430a      	orrs	r2, r1
 8000432:	615a      	str	r2, [r3, #20]
 8000434:	4b38      	ldr	r3, [pc, #224]	@ (8000518 <MX_GPIO_Init+0x124>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	02db      	lsls	r3, r3, #11
 800043c:	4013      	ands	r3, r2
 800043e:	607b      	str	r3, [r7, #4]
 8000440:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
 8000442:	4936      	ldr	r1, [pc, #216]	@ (800051c <MX_GPIO_Init+0x128>)
 8000444:	2390      	movs	r3, #144	@ 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2200      	movs	r2, #0
 800044a:	0018      	movs	r0, r3
 800044c:	f001 fb83 	bl	8001b56 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000450:	4b33      	ldr	r3, [pc, #204]	@ (8000520 <MX_GPIO_Init+0x12c>)
 8000452:	2200      	movs	r2, #0
 8000454:	2178      	movs	r1, #120	@ 0x78
 8000456:	0018      	movs	r0, r3
 8000458:	f001 fb7d 	bl	8001b56 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA4 PA6 PA8
                           PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8
 800045c:	193b      	adds	r3, r7, r4
 800045e:	4a2f      	ldr	r2, [pc, #188]	@ (800051c <MX_GPIO_Init+0x128>)
 8000460:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000462:	193b      	adds	r3, r7, r4
 8000464:	2201      	movs	r2, #1
 8000466:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	193b      	adds	r3, r7, r4
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046e:	193b      	adds	r3, r7, r4
 8000470:	2200      	movs	r2, #0
 8000472:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000474:	193a      	adds	r2, r7, r4
 8000476:	2390      	movs	r3, #144	@ 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	0011      	movs	r1, r2
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f9e5 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000482:	193b      	adds	r3, r7, r4
 8000484:	2204      	movs	r2, #4
 8000486:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000488:	193b      	adds	r3, r7, r4
 800048a:	2288      	movs	r2, #136	@ 0x88
 800048c:	0352      	lsls	r2, r2, #13
 800048e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	193b      	adds	r3, r7, r4
 8000492:	2200      	movs	r2, #0
 8000494:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000496:	193a      	adds	r2, r7, r4
 8000498:	2390      	movs	r3, #144	@ 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	0011      	movs	r1, r2
 800049e:	0018      	movs	r0, r3
 80004a0:	f001 f9d4 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80004a4:	0021      	movs	r1, r4
 80004a6:	187b      	adds	r3, r7, r1
 80004a8:	2203      	movs	r2, #3
 80004aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ac:	187b      	adds	r3, r7, r1
 80004ae:	2288      	movs	r2, #136	@ 0x88
 80004b0:	0352      	lsls	r2, r2, #13
 80004b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	187b      	adds	r3, r7, r1
 80004b6:	2200      	movs	r2, #0
 80004b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004ba:	000c      	movs	r4, r1
 80004bc:	187b      	adds	r3, r7, r1
 80004be:	4a18      	ldr	r2, [pc, #96]	@ (8000520 <MX_GPIO_Init+0x12c>)
 80004c0:	0019      	movs	r1, r3
 80004c2:	0010      	movs	r0, r2
 80004c4:	f001 f9c2 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80004c8:	0021      	movs	r1, r4
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2278      	movs	r2, #120	@ 0x78
 80004ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2201      	movs	r2, #1
 80004d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000520 <MX_GPIO_Init+0x12c>)
 80004e6:	0019      	movs	r1, r3
 80004e8:	0010      	movs	r0, r2
 80004ea:	f001 f9af 	bl	800184c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	2100      	movs	r1, #0
 80004f2:	2005      	movs	r0, #5
 80004f4:	f001 f978 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004f8:	2005      	movs	r0, #5
 80004fa:	f001 f98a 	bl	8001812 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2100      	movs	r1, #0
 8000502:	2006      	movs	r0, #6
 8000504:	f001 f970 	bl	80017e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000508:	2006      	movs	r0, #6
 800050a:	f001 f982 	bl	8001812 <HAL_NVIC_EnableIRQ>

}
 800050e:	46c0      	nop			@ (mov r8, r8)
 8000510:	46bd      	mov	sp, r7
 8000512:	b009      	add	sp, #36	@ 0x24
 8000514:	bd90      	pop	{r4, r7, pc}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	40021000 	.word	0x40021000
 800051c:	00000352 	.word	0x00000352
 8000520:	48000400 	.word	0x48000400

08000524 <Laser_Control>:
uint8_t mode3_servo_moving = 0;
uint8_t mode3_scan_complete = 0;
uint32_t last_mode3_check_time = 0;

// Funkcija za upravljanje laserom
void Laser_Control(uint8_t state) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	0002      	movs	r2, r0
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LASER_GPIO_Port, LASER_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000530:	1dfb      	adds	r3, r7, #7
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	1e5a      	subs	r2, r3, #1
 8000536:	4193      	sbcs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	001a      	movs	r2, r3
 800053c:	2390      	movs	r3, #144	@ 0x90
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	2110      	movs	r1, #16
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb07 	bl	8001b56 <HAL_GPIO_WritePin>
    laser_active = state;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <Laser_Control+0x48>)
 800054a:	1dfa      	adds	r2, r7, #7
 800054c:	7812      	ldrb	r2, [r2, #0]
 800054e:	701a      	strb	r2, [r3, #0]
    if(state) {
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d004      	beq.n	8000562 <Laser_Control+0x3e>
        laser_start_time = HAL_GetTick();
 8000558:	f001 f86c 	bl	8001634 <HAL_GetTick>
 800055c:	0002      	movs	r2, r0
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <Laser_Control+0x4c>)
 8000560:	601a      	str	r2, [r3, #0]
    }
}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000096 	.word	0x20000096
 8000570:	20000098 	.word	0x20000098

08000574 <Check_Laser_Timeout>:

// Laser gasi kad gotov
void Check_Laser_Timeout(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    if(laser_active && (HAL_GetTick() - laser_start_time >= LASER_DURATION)) {
 8000578:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <Check_Laser_Timeout+0x2c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d00b      	beq.n	8000598 <Check_Laser_Timeout+0x24>
 8000580:	f001 f858 	bl	8001634 <HAL_GetTick>
 8000584:	0002      	movs	r2, r0
 8000586:	4b07      	ldr	r3, [pc, #28]	@ (80005a4 <Check_Laser_Timeout+0x30>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	1ad3      	subs	r3, r2, r3
 800058c:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <Check_Laser_Timeout+0x34>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d902      	bls.n	8000598 <Check_Laser_Timeout+0x24>
        Laser_Control(0);
 8000592:	2000      	movs	r0, #0
 8000594:	f7ff ffc6 	bl	8000524 <Laser_Control>
    }
}
 8000598:	46c0      	nop			@ (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	20000096 	.word	0x20000096
 80005a4:	20000098 	.word	0x20000098
 80005a8:	00001387 	.word	0x00001387

080005ac <Servo_Set_Angle>:

// Funkcija za postavljanje kuta serva
void Servo_Set_Angle(uint8_t angle) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	0002      	movs	r2, r0
 80005b4:	1dfb      	adds	r3, r7, #7
 80005b6:	701a      	strb	r2, [r3, #0]
    if(angle > 180) angle = 180;
 80005b8:	1dfb      	adds	r3, r7, #7
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2bb4      	cmp	r3, #180	@ 0xb4
 80005be:	d902      	bls.n	80005c6 <Servo_Set_Angle+0x1a>
 80005c0:	1dfb      	adds	r3, r7, #7
 80005c2:	22b4      	movs	r2, #180	@ 0xb4
 80005c4:	701a      	strb	r2, [r3, #0]
    current_servo_angle = angle;
 80005c6:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <Servo_Set_Angle+0x5c>)
 80005c8:	1dfa      	adds	r2, r7, #7
 80005ca:	7812      	ldrb	r2, [r2, #0]
 80005cc:	701a      	strb	r2, [r3, #0]
    current_pulse_value = 500 + ((angle * 2000) / 180);
 80005ce:	1dfb      	adds	r3, r7, #7
 80005d0:	781a      	ldrb	r2, [r3, #0]
 80005d2:	0013      	movs	r3, r2
 80005d4:	015b      	lsls	r3, r3, #5
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	189b      	adds	r3, r3, r2
 80005dc:	011b      	lsls	r3, r3, #4
 80005de:	21b4      	movs	r1, #180	@ 0xb4
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff fe1b 	bl	800021c <__divsi3>
 80005e6:	0003      	movs	r3, r0
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	33f5      	adds	r3, #245	@ 0xf5
 80005ec:	33ff      	adds	r3, #255	@ 0xff
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	4b06      	ldr	r3, [pc, #24]	@ (800060c <Servo_Set_Angle+0x60>)
 80005f2:	801a      	strh	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, current_pulse_value);
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <Servo_Set_Angle+0x60>)
 80005f6:	881a      	ldrh	r2, [r3, #0]
 80005f8:	4b05      	ldr	r3, [pc, #20]	@ (8000610 <Servo_Set_Angle+0x64>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	2000005e 	.word	0x2000005e
 800060c:	20000060 	.word	0x20000060
 8000610:	200000f0 	.word	0x200000f0

08000614 <Set_LED_Mod1>:

// Funkcija za LED diode
void Set_LED_Mod1(uint8_t state) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	0002      	movs	r2, r0
 800061c:	1dfb      	adds	r3, r7, #7
 800061e:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_MOD1_GPIO_Port, LED_MOD1_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000620:	1dfb      	adds	r3, r7, #7
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	1e5a      	subs	r2, r3, #1
 8000626:	4193      	sbcs	r3, r2
 8000628:	b2db      	uxtb	r3, r3
 800062a:	001a      	movs	r2, r3
 800062c:	2390      	movs	r3, #144	@ 0x90
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2140      	movs	r1, #64	@ 0x40
 8000632:	0018      	movs	r0, r3
 8000634:	f001 fa8f 	bl	8001b56 <HAL_GPIO_WritePin>
}
 8000638:	46c0      	nop			@ (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	b002      	add	sp, #8
 800063e:	bd80      	pop	{r7, pc}

08000640 <Set_LED_Mod2>:

void Set_LED_Mod2(uint8_t state) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	0002      	movs	r2, r0
 8000648:	1dfb      	adds	r3, r7, #7
 800064a:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_MOD2_GPIO_Port, LED_MOD2_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800064c:	1dfb      	adds	r3, r7, #7
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	1e5a      	subs	r2, r3, #1
 8000652:	4193      	sbcs	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	001a      	movs	r2, r3
 8000658:	2380      	movs	r3, #128	@ 0x80
 800065a:	0059      	lsls	r1, r3, #1
 800065c:	2390      	movs	r3, #144	@ 0x90
 800065e:	05db      	lsls	r3, r3, #23
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fa78 	bl	8001b56 <HAL_GPIO_WritePin>
}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}

0800066e <Set_LED_Mod3>:

void Set_LED_Mod3(uint8_t state) {
 800066e:	b580      	push	{r7, lr}
 8000670:	b082      	sub	sp, #8
 8000672:	af00      	add	r7, sp, #0
 8000674:	0002      	movs	r2, r0
 8000676:	1dfb      	adds	r3, r7, #7
 8000678:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_MOD3_GPIO_Port, LED_MOD3_Pin, state ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800067a:	1dfb      	adds	r3, r7, #7
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	1e5a      	subs	r2, r3, #1
 8000680:	4193      	sbcs	r3, r2
 8000682:	b2db      	uxtb	r3, r3
 8000684:	001a      	movs	r2, r3
 8000686:	2380      	movs	r3, #128	@ 0x80
 8000688:	0099      	lsls	r1, r3, #2
 800068a:	2390      	movs	r3, #144	@ 0x90
 800068c:	05db      	lsls	r3, r3, #23
 800068e:	0018      	movs	r0, r3
 8000690:	f001 fa61 	bl	8001b56 <HAL_GPIO_WritePin>
}
 8000694:	46c0      	nop			@ (mov r8, r8)
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <Update_Mode_LEDs>:

// Led Blink Update
void Update_Mode_LEDs(void) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80006a2:	f000 ffc7 	bl	8001634 <HAL_GetTick>
 80006a6:	0003      	movs	r3, r0
 80006a8:	607b      	str	r3, [r7, #4]

    if(current_time - last_blink_time >= BLINK_INTERVAL) {
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <Update_Mode_LEDs+0x88>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	1ad2      	subs	r2, r2, r3
 80006b2:	23fa      	movs	r3, #250	@ 0xfa
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	429a      	cmp	r2, r3
 80006b8:	d30a      	bcc.n	80006d0 <Update_Mode_LEDs+0x34>
        led_blink_state = !led_blink_state;
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <Update_Mode_LEDs+0x8c>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	425a      	negs	r2, r3
 80006c0:	4153      	adcs	r3, r2
 80006c2:	b2db      	uxtb	r3, r3
 80006c4:	001a      	movs	r2, r3
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <Update_Mode_LEDs+0x8c>)
 80006c8:	701a      	strb	r2, [r3, #0]
        last_blink_time = current_time;
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <Update_Mode_LEDs+0x88>)
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	601a      	str	r2, [r3, #0]
    }

    // GAASI LED
    Set_LED_Mod1(0);
 80006d0:	2000      	movs	r0, #0
 80006d2:	f7ff ff9f 	bl	8000614 <Set_LED_Mod1>
    Set_LED_Mod2(0);
 80006d6:	2000      	movs	r0, #0
 80006d8:	f7ff ffb2 	bl	8000640 <Set_LED_Mod2>
    Set_LED_Mod3(0);
 80006dc:	2000      	movs	r0, #0
 80006de:	f7ff ffc6 	bl	800066e <Set_LED_Mod3>

    // UPali u trazenom modu
    switch(operation_mode) {
 80006e2:	4b12      	ldr	r3, [pc, #72]	@ (800072c <Update_Mode_LEDs+0x90>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d011      	beq.n	800070e <Update_Mode_LEDs+0x72>
 80006ea:	dc16      	bgt.n	800071a <Update_Mode_LEDs+0x7e>
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d002      	beq.n	80006f6 <Update_Mode_LEDs+0x5a>
 80006f0:	2b02      	cmp	r3, #2
 80006f2:	d006      	beq.n	8000702 <Update_Mode_LEDs+0x66>
            break;
        case 3:
            Set_LED_Mod3(led_blink_state); // MOD 3: Zelena
            break;
    }
}
 80006f4:	e011      	b.n	800071a <Update_Mode_LEDs+0x7e>
            Set_LED_Mod1(led_blink_state); // MOD 1: Zuta
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <Update_Mode_LEDs+0x8c>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff8a 	bl	8000614 <Set_LED_Mod1>
            break;
 8000700:	e00b      	b.n	800071a <Update_Mode_LEDs+0x7e>
            Set_LED_Mod2(led_blink_state); // MOD 2: Crvena
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <Update_Mode_LEDs+0x8c>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	0018      	movs	r0, r3
 8000708:	f7ff ff9a 	bl	8000640 <Set_LED_Mod2>
            break;
 800070c:	e005      	b.n	800071a <Update_Mode_LEDs+0x7e>
            Set_LED_Mod3(led_blink_state); // MOD 3: Zelena
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <Update_Mode_LEDs+0x8c>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	0018      	movs	r0, r3
 8000714:	f7ff ffab 	bl	800066e <Set_LED_Mod3>
            break;
 8000718:	46c0      	nop			@ (mov r8, r8)
}
 800071a:	46c0      	nop			@ (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	b002      	add	sp, #8
 8000720:	bd80      	pop	{r7, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	20000080 	.word	0x20000080
 8000728:	2000007c 	.word	0x2000007c
 800072c:	20000020 	.word	0x20000020

08000730 <HCSR04_Start_With_Filter>:

// Ultrazvucni trigger i mjerenje filtar
void HCSR04_Start_With_Filter(void) {
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, 0);
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <HCSR04_Start_With_Filter+0x44>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	2200      	movs	r2, #0
 800073a:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_Delay(5);
 800073c:	2005      	movs	r0, #5
 800073e:	f000 ff83 	bl	8001648 <HAL_Delay>
    HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_SET);
 8000742:	2390      	movs	r3, #144	@ 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2201      	movs	r2, #1
 8000748:	2102      	movs	r1, #2
 800074a:	0018      	movs	r0, r3
 800074c:	f001 fa03 	bl	8001b56 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f000 ff79 	bl	8001648 <HAL_Delay>
    HAL_GPIO_WritePin(TRIGGER_GPIO_Port, TRIGGER_Pin, GPIO_PIN_RESET);
 8000756:	2390      	movs	r3, #144	@ 0x90
 8000758:	05db      	lsls	r3, r3, #23
 800075a:	2200      	movs	r2, #0
 800075c:	2102      	movs	r1, #2
 800075e:	0018      	movs	r0, r3
 8000760:	f001 f9f9 	bl	8001b56 <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&htim14, TIM_CHANNEL_1, current_pulse_value);
 8000764:	4b04      	ldr	r3, [pc, #16]	@ (8000778 <HCSR04_Start_With_Filter+0x48>)
 8000766:	881a      	ldrh	r2, [r3, #0]
 8000768:	4b02      	ldr	r3, [pc, #8]	@ (8000774 <HCSR04_Start_With_Filter+0x44>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	200000f0 	.word	0x200000f0
 8000778:	20000060 	.word	0x20000060

0800077c <Stepper_Update>:

// Stepper/KOracni motor
void Stepper_Update(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
    static uint32_t last_step_time = 0;
    uint32_t current_time = HAL_GetTick();
 8000782:	f000 ff57 	bl	8001634 <HAL_GetTick>
 8000786:	0003      	movs	r3, r0
 8000788:	607b      	str	r3, [r7, #4]

    if(current_time - last_step_time < 3) return;
 800078a:	4b41      	ldr	r3, [pc, #260]	@ (8000890 <Stepper_Update+0x114>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	1ad3      	subs	r3, r2, r3
 8000792:	2b02      	cmp	r3, #2
 8000794:	d800      	bhi.n	8000798 <Stepper_Update+0x1c>
 8000796:	e076      	b.n	8000886 <Stepper_Update+0x10a>

    int32_t position_diff = stepper_target - stepper_position;
 8000798:	4b3e      	ldr	r3, [pc, #248]	@ (8000894 <Stepper_Update+0x118>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b3e      	ldr	r3, [pc, #248]	@ (8000898 <Stepper_Update+0x11c>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	603b      	str	r3, [r7, #0]

    if(position_diff > 0) {
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	dd16      	ble.n	80007d8 <Stepper_Update+0x5c>
        stepper_index = (stepper_index + 1) % 8;
 80007aa:	4b3c      	ldr	r3, [pc, #240]	@ (800089c <Stepper_Update+0x120>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3301      	adds	r3, #1
 80007b0:	4a3b      	ldr	r2, [pc, #236]	@ (80008a0 <Stepper_Update+0x124>)
 80007b2:	4013      	ands	r3, r2
 80007b4:	d504      	bpl.n	80007c0 <Stepper_Update+0x44>
 80007b6:	3b01      	subs	r3, #1
 80007b8:	2208      	movs	r2, #8
 80007ba:	4252      	negs	r2, r2
 80007bc:	4313      	orrs	r3, r2
 80007be:	3301      	adds	r3, #1
 80007c0:	b2da      	uxtb	r2, r3
 80007c2:	4b36      	ldr	r3, [pc, #216]	@ (800089c <Stepper_Update+0x120>)
 80007c4:	701a      	strb	r2, [r3, #0]
        stepper_position++;
 80007c6:	4b34      	ldr	r3, [pc, #208]	@ (8000898 <Stepper_Update+0x11c>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	1c5a      	adds	r2, r3, #1
 80007cc:	4b32      	ldr	r3, [pc, #200]	@ (8000898 <Stepper_Update+0x11c>)
 80007ce:	601a      	str	r2, [r3, #0]
        last_step_time = current_time;
 80007d0:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <Stepper_Update+0x114>)
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	e016      	b.n	8000806 <Stepper_Update+0x8a>
    }
    else if(position_diff < 0) {
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	da13      	bge.n	8000806 <Stepper_Update+0x8a>
        stepper_index = (stepper_index == 0) ? 7 : stepper_index - 1;
 80007de:	4b2f      	ldr	r3, [pc, #188]	@ (800089c <Stepper_Update+0x120>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <Stepper_Update+0x74>
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <Stepper_Update+0x120>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	e000      	b.n	80007f2 <Stepper_Update+0x76>
 80007f0:	2207      	movs	r2, #7
 80007f2:	4b2a      	ldr	r3, [pc, #168]	@ (800089c <Stepper_Update+0x120>)
 80007f4:	701a      	strb	r2, [r3, #0]
        stepper_position--;
 80007f6:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <Stepper_Update+0x11c>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	1e5a      	subs	r2, r3, #1
 80007fc:	4b26      	ldr	r3, [pc, #152]	@ (8000898 <Stepper_Update+0x11c>)
 80007fe:	601a      	str	r2, [r3, #0]
        last_step_time = current_time;
 8000800:	4b23      	ldr	r3, [pc, #140]	@ (8000890 <Stepper_Update+0x114>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
    }

    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, stepper_sequence[stepper_index][0] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000806:	4b25      	ldr	r3, [pc, #148]	@ (800089c <Stepper_Update+0x120>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	001a      	movs	r2, r3
 800080c:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <Stepper_Update+0x128>)
 800080e:	0092      	lsls	r2, r2, #2
 8000810:	5cd3      	ldrb	r3, [r2, r3]
 8000812:	1e5a      	subs	r2, r3, #1
 8000814:	4193      	sbcs	r3, r2
 8000816:	b2db      	uxtb	r3, r3
 8000818:	001a      	movs	r2, r3
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <Stepper_Update+0x12c>)
 800081c:	2108      	movs	r1, #8
 800081e:	0018      	movs	r0, r3
 8000820:	f001 f999 	bl	8001b56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, stepper_sequence[stepper_index][1] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000824:	4b1d      	ldr	r3, [pc, #116]	@ (800089c <Stepper_Update+0x120>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4a1e      	ldr	r2, [pc, #120]	@ (80008a4 <Stepper_Update+0x128>)
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	18d3      	adds	r3, r2, r3
 800082e:	3301      	adds	r3, #1
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	1e5a      	subs	r2, r3, #1
 8000834:	4193      	sbcs	r3, r2
 8000836:	b2db      	uxtb	r3, r3
 8000838:	001a      	movs	r2, r3
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <Stepper_Update+0x12c>)
 800083c:	2110      	movs	r1, #16
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f989 	bl	8001b56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, stepper_sequence[stepper_index][2] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000844:	4b15      	ldr	r3, [pc, #84]	@ (800089c <Stepper_Update+0x120>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <Stepper_Update+0x128>)
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	18d3      	adds	r3, r2, r3
 800084e:	3302      	adds	r3, #2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	4193      	sbcs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	001a      	movs	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <Stepper_Update+0x12c>)
 800085c:	2120      	movs	r1, #32
 800085e:	0018      	movs	r0, r3
 8000860:	f001 f979 	bl	8001b56 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, stepper_sequence[stepper_index][3] ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000864:	4b0d      	ldr	r3, [pc, #52]	@ (800089c <Stepper_Update+0x120>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	4a0e      	ldr	r2, [pc, #56]	@ (80008a4 <Stepper_Update+0x128>)
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	18d3      	adds	r3, r2, r3
 800086e:	3303      	adds	r3, #3
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	1e5a      	subs	r2, r3, #1
 8000874:	4193      	sbcs	r3, r2
 8000876:	b2db      	uxtb	r3, r3
 8000878:	001a      	movs	r2, r3
 800087a:	4b0b      	ldr	r3, [pc, #44]	@ (80008a8 <Stepper_Update+0x12c>)
 800087c:	2140      	movs	r1, #64	@ 0x40
 800087e:	0018      	movs	r0, r3
 8000880:	f001 f969 	bl	8001b56 <HAL_GPIO_WritePin>
 8000884:	e000      	b.n	8000888 <Stepper_Update+0x10c>
    if(current_time - last_step_time < 3) return;
 8000886:	46c0      	nop			@ (mov r8, r8)
}
 8000888:	46bd      	mov	sp, r7
 800088a:	b002      	add	sp, #8
 800088c:	bd80      	pop	{r7, pc}
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	200000a4 	.word	0x200000a4
 8000894:	20000068 	.word	0x20000068
 8000898:	20000064 	.word	0x20000064
 800089c:	2000006c 	.word	0x2000006c
 80008a0:	80000007 	.word	0x80000007
 80008a4:	20000000 	.word	0x20000000
 80008a8:	48000400 	.word	0x48000400

080008ac <Stepper_Turn_To_Exact_Position>:

// Preciznijie okretanje steppera na trazenu tocku
void Stepper_Turn_To_Exact_Position(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
    // Racunanje pozicije na temelju zadnje ocitanog kuta
    uint8_t corrected_angle = 180 - last_detected_angle;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <Stepper_Turn_To_Exact_Position+0x5c>)
 80008b4:	781a      	ldrb	r2, [r3, #0]
 80008b6:	1cfb      	adds	r3, r7, #3
 80008b8:	214c      	movs	r1, #76	@ 0x4c
 80008ba:	4249      	negs	r1, r1
 80008bc:	1a8a      	subs	r2, r1, r2
 80008be:	701a      	strb	r2, [r3, #0]
    int32_t new_target = corrected_angle * STEPS_PER_DEGREE;
 80008c0:	1cfb      	adds	r3, r7, #3
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	0013      	movs	r3, r2
 80008c6:	009b      	lsls	r3, r3, #2
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	607b      	str	r3, [r7, #4]

    // Ograniči min max
    if(new_target > MAX_STEPPER_STEPS) new_target = MAX_STEPPER_STEPS;
 80008ce:	687a      	ldr	r2, [r7, #4]
 80008d0:	23e1      	movs	r3, #225	@ 0xe1
 80008d2:	00db      	lsls	r3, r3, #3
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dd02      	ble.n	80008de <Stepper_Turn_To_Exact_Position+0x32>
 80008d8:	23e1      	movs	r3, #225	@ 0xe1
 80008da:	00db      	lsls	r3, r3, #3
 80008dc:	607b      	str	r3, [r7, #4]
    if(new_target < 0) new_target = 0;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	da01      	bge.n	80008e8 <Stepper_Turn_To_Exact_Position+0x3c>
 80008e4:	2300      	movs	r3, #0
 80008e6:	607b      	str	r3, [r7, #4]

    // Postavi novu pozicikju SAMO ako se razlikuje od trenutne
    if(new_target != stepper_target) {
 80008e8:	4b08      	ldr	r3, [pc, #32]	@ (800090c <Stepper_Turn_To_Exact_Position+0x60>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	687a      	ldr	r2, [r7, #4]
 80008ee:	429a      	cmp	r2, r3
 80008f0:	d005      	beq.n	80008fe <Stepper_Turn_To_Exact_Position+0x52>
        stepper_target = new_target;
 80008f2:	4b06      	ldr	r3, [pc, #24]	@ (800090c <Stepper_Turn_To_Exact_Position+0x60>)
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]
        // Upali laser kada se stepper počne okretati prema objektu/predmetu
        Laser_Control(1);
 80008f8:	2001      	movs	r0, #1
 80008fa:	f7ff fe13 	bl	8000524 <Laser_Control>
    }
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	b002      	add	sp, #8
 8000904:	bd80      	pop	{r7, pc}
 8000906:	46c0      	nop			@ (mov r8, r8)
 8000908:	20000076 	.word	0x20000076
 800090c:	20000068 	.word	0x20000068

08000910 <Track_Closest_Object>:

// Funkcija za praćenje najbližeg objekta (mod 3)
void Track_Closest_Object(void) {
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
    if(Object_Detected) {
 8000914:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <Track_Closest_Object+0x3c>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d014      	beq.n	8000946 <Track_Closest_Object+0x36>
        if(Distance < closest_distance || closest_distance == 0) {
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <Track_Closest_Object+0x40>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <Track_Closest_Object+0x44>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	429a      	cmp	r2, r3
 8000926:	d303      	bcc.n	8000930 <Track_Closest_Object+0x20>
 8000928:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <Track_Closest_Object+0x44>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d10a      	bne.n	8000946 <Track_Closest_Object+0x36>
            closest_distance = Distance;
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <Track_Closest_Object+0x40>)
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	4b07      	ldr	r3, [pc, #28]	@ (8000954 <Track_Closest_Object+0x44>)
 8000936:	601a      	str	r2, [r3, #0]
            closest_angle = current_servo_angle;
 8000938:	4b07      	ldr	r3, [pc, #28]	@ (8000958 <Track_Closest_Object+0x48>)
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	4b07      	ldr	r3, [pc, #28]	@ (800095c <Track_Closest_Object+0x4c>)
 800093e:	701a      	strb	r2, [r3, #0]
            tracking_closest = 1;
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <Track_Closest_Object+0x50>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	2000005c 	.word	0x2000005c
 8000950:	20000058 	.word	0x20000058
 8000954:	20000090 	.word	0x20000090
 8000958:	2000005e 	.word	0x2000005e
 800095c:	20000094 	.word	0x20000094
 8000960:	20000095 	.word	0x20000095

08000964 <HAL_TIM_IC_CaptureCallback>:

// Funckija za ocitavanje echa iz ultrazvucnog i racunanje duljine
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM2) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	05db      	lsls	r3, r3, #23
 8000974:	429a      	cmp	r2, r3
 8000976:	d000      	beq.n	800097a <HAL_TIM_IC_CaptureCallback+0x16>
 8000978:	e0a7      	b.n	8000aca <HAL_TIM_IC_CaptureCallback+0x166>
        if(Is_First_Captured == 0) {
 800097a:	4b56      	ldr	r3, [pc, #344]	@ (8000ad4 <HAL_TIM_IC_CaptureCallback+0x170>)
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	2b00      	cmp	r3, #0
 8000980:	d11b      	bne.n	80009ba <HAL_TIM_IC_CaptureCallback+0x56>
            IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2100      	movs	r1, #0
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fa60 	bl	8002e4c <HAL_TIM_ReadCapturedValue>
 800098c:	0002      	movs	r2, r0
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <HAL_TIM_IC_CaptureCallback+0x174>)
 8000990:	601a      	str	r2, [r3, #0]
            Is_First_Captured = 1;
 8000992:	4b50      	ldr	r3, [pc, #320]	@ (8000ad4 <HAL_TIM_IC_CaptureCallback+0x170>)
 8000994:	2201      	movs	r2, #1
 8000996:	701a      	strb	r2, [r3, #0]
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	6a1a      	ldr	r2, [r3, #32]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	210a      	movs	r1, #10
 80009a4:	438a      	bics	r2, r1
 80009a6:	621a      	str	r2, [r3, #32]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	6a1a      	ldr	r2, [r3, #32]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	2102      	movs	r1, #2
 80009b4:	430a      	orrs	r2, r1
 80009b6:	621a      	str	r2, [r3, #32]
            }

            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
        }
    }
}
 80009b8:	e087      	b.n	8000aca <HAL_TIM_IC_CaptureCallback+0x166>
            IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2100      	movs	r1, #0
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fa44 	bl	8002e4c <HAL_TIM_ReadCapturedValue>
 80009c4:	0002      	movs	r2, r0
 80009c6:	4b45      	ldr	r3, [pc, #276]	@ (8000adc <HAL_TIM_IC_CaptureCallback+0x178>)
 80009c8:	601a      	str	r2, [r3, #0]
            Is_First_Captured = 0;
 80009ca:	4b42      	ldr	r3, [pc, #264]	@ (8000ad4 <HAL_TIM_IC_CaptureCallback+0x170>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
            if(IC_Val2 > IC_Val1) Difference = IC_Val2 - IC_Val1;
 80009d0:	4b42      	ldr	r3, [pc, #264]	@ (8000adc <HAL_TIM_IC_CaptureCallback+0x178>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b40      	ldr	r3, [pc, #256]	@ (8000ad8 <HAL_TIM_IC_CaptureCallback+0x174>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d906      	bls.n	80009ea <HAL_TIM_IC_CaptureCallback+0x86>
 80009dc:	4b3f      	ldr	r3, [pc, #252]	@ (8000adc <HAL_TIM_IC_CaptureCallback+0x178>)
 80009de:	681a      	ldr	r2, [r3, #0]
 80009e0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <HAL_TIM_IC_CaptureCallback+0x174>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	1ad3      	subs	r3, r2, r3
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	e008      	b.n	80009fc <HAL_TIM_IC_CaptureCallback+0x98>
            else Difference = (0xFFFF - IC_Val1) + IC_Val2;
 80009ea:	4b3c      	ldr	r3, [pc, #240]	@ (8000adc <HAL_TIM_IC_CaptureCallback+0x178>)
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <HAL_TIM_IC_CaptureCallback+0x174>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	1ad3      	subs	r3, r2, r3
 80009f4:	4a3a      	ldr	r2, [pc, #232]	@ (8000ae0 <HAL_TIM_IC_CaptureCallback+0x17c>)
 80009f6:	4694      	mov	ip, r2
 80009f8:	4463      	add	r3, ip
 80009fa:	60fb      	str	r3, [r7, #12]
            Distance = (Difference * 34) / 2000;
 80009fc:	68fa      	ldr	r2, [r7, #12]
 80009fe:	0013      	movs	r3, r2
 8000a00:	011b      	lsls	r3, r3, #4
 8000a02:	189b      	adds	r3, r3, r2
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	001a      	movs	r2, r3
 8000a08:	23fa      	movs	r3, #250	@ 0xfa
 8000a0a:	00d9      	lsls	r1, r3, #3
 8000a0c:	0010      	movs	r0, r2
 8000a0e:	f7ff fb7b 	bl	8000108 <__udivsi3>
 8000a12:	0003      	movs	r3, r0
 8000a14:	001a      	movs	r2, r3
 8000a16:	4b33      	ldr	r3, [pc, #204]	@ (8000ae4 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000a18:	601a      	str	r2, [r3, #0]
            if(Distance >= MIN_DETECTION_DISTANCE && Distance <= MAX_DETECTION_DISTANCE) {
 8000a1a:	4b32      	ldr	r3, [pc, #200]	@ (8000ae4 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	2b09      	cmp	r3, #9
 8000a20:	d940      	bls.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x140>
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <HAL_TIM_IC_CaptureCallback+0x180>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b28      	cmp	r3, #40	@ 0x28
 8000a28:	d83c      	bhi.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x140>
                Object_Detected = 1;
 8000a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
                Servo_Angle_At_Detection = current_servo_angle;
 8000a30:	4b2e      	ldr	r3, [pc, #184]	@ (8000aec <HAL_TIM_IC_CaptureCallback+0x188>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b2e      	ldr	r3, [pc, #184]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000a36:	701a      	strb	r2, [r3, #0]
                if(operation_mode == 1) {
 8000a38:	4b2e      	ldr	r3, [pc, #184]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b01      	cmp	r3, #1
 8000a3e:	d10b      	bne.n	8000a58 <HAL_TIM_IC_CaptureCallback+0xf4>
                    last_detected_angle = Servo_Angle_At_Detection;
 8000a40:	4b2b      	ldr	r3, [pc, #172]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	4b2c      	ldr	r3, [pc, #176]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000a46:	701a      	strb	r2, [r3, #0]
                    last_detection_time = HAL_GetTick();
 8000a48:	f000 fdf4 	bl	8001634 <HAL_GetTick>
 8000a4c:	0002      	movs	r2, r0
 8000a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <HAL_TIM_IC_CaptureCallback+0x198>)
 8000a50:	601a      	str	r2, [r3, #0]
                    Stepper_Turn_To_Exact_Position();
 8000a52:	f7ff ff2b 	bl	80008ac <Stepper_Turn_To_Exact_Position>
                if(operation_mode == 1) {
 8000a56:	e029      	b.n	8000aac <HAL_TIM_IC_CaptureCallback+0x148>
                else if(operation_mode == 2 && !mode2_active) {
 8000a58:	4b26      	ldr	r3, [pc, #152]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d11a      	bne.n	8000a96 <HAL_TIM_IC_CaptureCallback+0x132>
 8000a60:	4b27      	ldr	r3, [pc, #156]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d116      	bne.n	8000a96 <HAL_TIM_IC_CaptureCallback+0x132>
                    last_detected_angle = Servo_Angle_At_Detection;
 8000a68:	4b21      	ldr	r3, [pc, #132]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x18c>)
 8000a6a:	781a      	ldrb	r2, [r3, #0]
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x194>)
 8000a6e:	701a      	strb	r2, [r3, #0]
                    last_detection_time = HAL_GetTick();
 8000a70:	f000 fde0 	bl	8001634 <HAL_GetTick>
 8000a74:	0002      	movs	r2, r0
 8000a76:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <HAL_TIM_IC_CaptureCallback+0x198>)
 8000a78:	601a      	str	r2, [r3, #0]
                    mode2_active = 1;
 8000a7a:	4b21      	ldr	r3, [pc, #132]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x19c>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	701a      	strb	r2, [r3, #0]
                    mode2_servo_stopped = 1;
 8000a80:	4b20      	ldr	r3, [pc, #128]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x1a0>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
                    mode2_timer = HAL_GetTick();
 8000a86:	f000 fdd5 	bl	8001634 <HAL_GetTick>
 8000a8a:	0002      	movs	r2, r0
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x1a4>)
 8000a8e:	601a      	str	r2, [r3, #0]
                    Stepper_Turn_To_Exact_Position();
 8000a90:	f7ff ff0c 	bl	80008ac <Stepper_Turn_To_Exact_Position>
                if(operation_mode == 1) {
 8000a94:	e00a      	b.n	8000aac <HAL_TIM_IC_CaptureCallback+0x148>
                else if(operation_mode == 3) {
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x190>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	d106      	bne.n	8000aac <HAL_TIM_IC_CaptureCallback+0x148>
                    Track_Closest_Object();
 8000a9e:	f7ff ff37 	bl	8000910 <Track_Closest_Object>
                if(operation_mode == 1) {
 8000aa2:	e003      	b.n	8000aac <HAL_TIM_IC_CaptureCallback+0x148>
                Object_Detected = 0;
 8000aa4:	4b10      	ldr	r3, [pc, #64]	@ (8000ae8 <HAL_TIM_IC_CaptureCallback+0x184>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e000      	b.n	8000aae <HAL_TIM_IC_CaptureCallback+0x14a>
                if(operation_mode == 1) {
 8000aac:	46c0      	nop			@ (mov r8, r8)
            __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	6a1a      	ldr	r2, [r3, #32]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	210a      	movs	r1, #10
 8000aba:	438a      	bics	r2, r1
 8000abc:	621a      	str	r2, [r3, #32]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	6a12      	ldr	r2, [r2, #32]
 8000ac8:	621a      	str	r2, [r3, #32]
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	b004      	add	sp, #16
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	20000054 	.word	0x20000054
 8000ad8:	2000004c 	.word	0x2000004c
 8000adc:	20000050 	.word	0x20000050
 8000ae0:	0000ffff 	.word	0x0000ffff
 8000ae4:	20000058 	.word	0x20000058
 8000ae8:	2000005c 	.word	0x2000005c
 8000aec:	2000005e 	.word	0x2000005e
 8000af0:	2000005d 	.word	0x2000005d
 8000af4:	20000020 	.word	0x20000020
 8000af8:	20000076 	.word	0x20000076
 8000afc:	20000078 	.word	0x20000078
 8000b00:	20000074 	.word	0x20000074
 8000b04:	20000075 	.word	0x20000075
 8000b08:	20000070 	.word	0x20000070

08000b0c <HAL_GPIO_EXTI_Callback>:

// Interrupti za tipkala
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b084      	sub	sp, #16
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	0002      	movs	r2, r0
 8000b14:	1dbb      	adds	r3, r7, #6
 8000b16:	801a      	strh	r2, [r3, #0]
    uint32_t current_time = HAL_GetTick();
 8000b18:	f000 fd8c 	bl	8001634 <HAL_GetTick>
 8000b1c:	0003      	movs	r3, r0
 8000b1e:	60fb      	str	r3, [r7, #12]

    if(GPIO_Pin == BUTTON1_Pin) {
 8000b20:	1dbb      	adds	r3, r7, #6
 8000b22:	881b      	ldrh	r3, [r3, #0]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10c      	bne.n	8000b42 <HAL_GPIO_EXTI_Callback+0x36>
        if(current_time - last_button1_time > DEBOUNCE_DELAY) {
 8000b28:	4b18      	ldr	r3, [pc, #96]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x80>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	68fa      	ldr	r2, [r7, #12]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b32      	cmp	r3, #50	@ 0x32
 8000b32:	d927      	bls.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
            button1_pressed = 1;
 8000b34:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <HAL_GPIO_EXTI_Callback+0x84>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
            last_button1_time = current_time;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <HAL_GPIO_EXTI_Callback+0x80>)
 8000b3c:	68fa      	ldr	r2, [r7, #12]
 8000b3e:	601a      	str	r2, [r3, #0]
        if(current_time - last_button3_time > DEBOUNCE_DELAY) {
            button3_pressed = 1;
            last_button3_time = current_time;
        }
    }
}
 8000b40:	e020      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
    else if(GPIO_Pin == BUTTON2_Pin) {
 8000b42:	1dbb      	adds	r3, r7, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	2b02      	cmp	r3, #2
 8000b48:	d10c      	bne.n	8000b64 <HAL_GPIO_EXTI_Callback+0x58>
        if(current_time - last_button2_time > DEBOUNCE_DELAY) {
 8000b4a:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	2b32      	cmp	r3, #50	@ 0x32
 8000b54:	d916      	bls.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
            button2_pressed = 1;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
            last_button2_time = current_time;
 8000b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b94 <HAL_GPIO_EXTI_Callback+0x88>)
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	e00f      	b.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
    else if(GPIO_Pin == BUTTON3_Pin) {
 8000b64:	1dbb      	adds	r3, r7, #6
 8000b66:	881b      	ldrh	r3, [r3, #0]
 8000b68:	2b04      	cmp	r3, #4
 8000b6a:	d10b      	bne.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
        if(current_time - last_button3_time > DEBOUNCE_DELAY) {
 8000b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x90>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b32      	cmp	r3, #50	@ 0x32
 8000b76:	d905      	bls.n	8000b84 <HAL_GPIO_EXTI_Callback+0x78>
            button3_pressed = 1;
 8000b78:	4b09      	ldr	r3, [pc, #36]	@ (8000ba0 <HAL_GPIO_EXTI_Callback+0x94>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
            last_button3_time = current_time;
 8000b7e:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <HAL_GPIO_EXTI_Callback+0x90>)
 8000b80:	68fa      	ldr	r2, [r7, #12]
 8000b82:	601a      	str	r2, [r3, #0]
}
 8000b84:	46c0      	nop			@ (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b004      	add	sp, #16
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000084 	.word	0x20000084
 8000b90:	2000006d 	.word	0x2000006d
 8000b94:	20000088 	.word	0x20000088
 8000b98:	2000006e 	.word	0x2000006e
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	2000006f 	.word	0x2000006f

08000ba4 <Handle_Button_Presses>:

// funkcija za kad su pritisnute tipke
void Handle_Button_Presses(void) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
    if(button1_pressed) {
 8000ba8:	4b38      	ldr	r3, [pc, #224]	@ (8000c8c <Handle_Button_Presses+0xe8>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d020      	beq.n	8000bf2 <Handle_Button_Presses+0x4e>
        operation_mode = 1;
 8000bb0:	4b37      	ldr	r3, [pc, #220]	@ (8000c90 <Handle_Button_Presses+0xec>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	701a      	strb	r2, [r3, #0]
        button1_pressed = 0;
 8000bb6:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <Handle_Button_Presses+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
        mode2_active = 0;
 8000bbc:	4b35      	ldr	r3, [pc, #212]	@ (8000c94 <Handle_Button_Presses+0xf0>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
        mode2_servo_stopped = 0;
 8000bc2:	4b35      	ldr	r3, [pc, #212]	@ (8000c98 <Handle_Button_Presses+0xf4>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
        Object_Detected = 0;
 8000bc8:	4b34      	ldr	r3, [pc, #208]	@ (8000c9c <Handle_Button_Presses+0xf8>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
        tracking_closest = 0;
 8000bce:	4b34      	ldr	r3, [pc, #208]	@ (8000ca0 <Handle_Button_Presses+0xfc>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	701a      	strb	r2, [r3, #0]
        closest_distance = 0;
 8000bd4:	4b33      	ldr	r3, [pc, #204]	@ (8000ca4 <Handle_Button_Presses+0x100>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
        mode3_servo_moving = 0;
 8000bda:	4b33      	ldr	r3, [pc, #204]	@ (8000ca8 <Handle_Button_Presses+0x104>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
        mode3_scan_complete = 0;
 8000be0:	4b32      	ldr	r3, [pc, #200]	@ (8000cac <Handle_Button_Presses+0x108>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	701a      	strb	r2, [r3, #0]
        Laser_Control(0);
 8000be6:	2000      	movs	r0, #0
 8000be8:	f7ff fc9c 	bl	8000524 <Laser_Control>
        Update_Mode_LEDs();
 8000bec:	f7ff fd56 	bl	800069c <Update_Mode_LEDs>
        mode3_servo_moving = 0;
        mode3_scan_complete = 0;
        Laser_Control(0);
        Update_Mode_LEDs();
    }
}
 8000bf0:	e048      	b.n	8000c84 <Handle_Button_Presses+0xe0>
    else if(button2_pressed) {
 8000bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb0 <Handle_Button_Presses+0x10c>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d020      	beq.n	8000c3c <Handle_Button_Presses+0x98>
        operation_mode = 2;
 8000bfa:	4b25      	ldr	r3, [pc, #148]	@ (8000c90 <Handle_Button_Presses+0xec>)
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	701a      	strb	r2, [r3, #0]
        button2_pressed = 0;
 8000c00:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <Handle_Button_Presses+0x10c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
        mode2_active = 0;
 8000c06:	4b23      	ldr	r3, [pc, #140]	@ (8000c94 <Handle_Button_Presses+0xf0>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	701a      	strb	r2, [r3, #0]
        mode2_servo_stopped = 0;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <Handle_Button_Presses+0xf4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
        Object_Detected = 0;
 8000c12:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <Handle_Button_Presses+0xf8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
        tracking_closest = 0;
 8000c18:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <Handle_Button_Presses+0xfc>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	701a      	strb	r2, [r3, #0]
        closest_distance = 0;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <Handle_Button_Presses+0x100>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
        mode3_servo_moving = 0;
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <Handle_Button_Presses+0x104>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	701a      	strb	r2, [r3, #0]
        mode3_scan_complete = 0;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <Handle_Button_Presses+0x108>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
        Laser_Control(0);
 8000c30:	2000      	movs	r0, #0
 8000c32:	f7ff fc77 	bl	8000524 <Laser_Control>
        Update_Mode_LEDs();
 8000c36:	f7ff fd31 	bl	800069c <Update_Mode_LEDs>
}
 8000c3a:	e023      	b.n	8000c84 <Handle_Button_Presses+0xe0>
    else if(button3_pressed) {
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <Handle_Button_Presses+0x110>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d01f      	beq.n	8000c84 <Handle_Button_Presses+0xe0>
        operation_mode = 3;
 8000c44:	4b12      	ldr	r3, [pc, #72]	@ (8000c90 <Handle_Button_Presses+0xec>)
 8000c46:	2203      	movs	r2, #3
 8000c48:	701a      	strb	r2, [r3, #0]
        button3_pressed = 0;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb4 <Handle_Button_Presses+0x110>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
        mode2_active = 0;
 8000c50:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <Handle_Button_Presses+0xf0>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
        mode2_servo_stopped = 0;
 8000c56:	4b10      	ldr	r3, [pc, #64]	@ (8000c98 <Handle_Button_Presses+0xf4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
        Object_Detected = 0;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c9c <Handle_Button_Presses+0xf8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
        tracking_closest = 0;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <Handle_Button_Presses+0xfc>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	701a      	strb	r2, [r3, #0]
        closest_distance = 0;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <Handle_Button_Presses+0x100>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
        mode3_servo_moving = 0;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <Handle_Button_Presses+0x104>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
        mode3_scan_complete = 0;
 8000c74:	4b0d      	ldr	r3, [pc, #52]	@ (8000cac <Handle_Button_Presses+0x108>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
        Laser_Control(0);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fc52 	bl	8000524 <Laser_Control>
        Update_Mode_LEDs();
 8000c80:	f7ff fd0c 	bl	800069c <Update_Mode_LEDs>
}
 8000c84:	46c0      	nop			@ (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	2000006d 	.word	0x2000006d
 8000c90:	20000020 	.word	0x20000020
 8000c94:	20000074 	.word	0x20000074
 8000c98:	20000075 	.word	0x20000075
 8000c9c:	2000005c 	.word	0x2000005c
 8000ca0:	20000095 	.word	0x20000095
 8000ca4:	20000090 	.word	0x20000090
 8000ca8:	2000009d 	.word	0x2000009d
 8000cac:	2000009e 	.word	0x2000009e
 8000cb0:	2000006e 	.word	0x2000006e
 8000cb4:	2000006f 	.word	0x2000006f

08000cb8 <main>:

int main(void) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
    // Inicijalizacija HAL biblioteke i satova
    HAL_Init();
 8000cbe:	f000 fc5f 	bl	8001580 <HAL_Init>
    SystemClock_Config();
 8000cc2:	f000 fa2f 	bl	8001124 <SystemClock_Config>

    // Inicijalizacija GPIO i Timer periferija
    MX_GPIO_Init();
 8000cc6:	f7ff fb95 	bl	80003f4 <MX_GPIO_Init>
    MX_TIM2_Init();    // Timer za input capture (HC-SR04)
 8000cca:	f000 fad3 	bl	8001274 <MX_TIM2_Init>
    MX_TIM14_Init();   // Timer za PWM (servo)
 8000cce:	f000 fb2d 	bl	800132c <MX_TIM14_Init>

    // Pokretanje timer periferija
    HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);  // Input capture s prekidima
 8000cd2:	4bd5      	ldr	r3, [pc, #852]	@ (8001028 <main+0x370>)
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f001 fd58 	bl	800278c <HAL_TIM_IC_Start_IT>
    HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);   // PWM izlaz za servo
 8000cdc:	4bd3      	ldr	r3, [pc, #844]	@ (800102c <main+0x374>)
 8000cde:	2100      	movs	r1, #0
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f001 fc57 	bl	8002594 <HAL_TIM_PWM_Start>

    // Postavljanje polariteta input capture za HC-SR04
    __HAL_TIM_SET_CAPTUREPOLARITY(&htim2, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ce6:	4bd0      	ldr	r3, [pc, #832]	@ (8001028 <main+0x370>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	6a1a      	ldr	r2, [r3, #32]
 8000cec:	4bce      	ldr	r3, [pc, #824]	@ (8001028 <main+0x370>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	210a      	movs	r1, #10
 8000cf2:	438a      	bics	r2, r1
 8000cf4:	621a      	str	r2, [r3, #32]
 8000cf6:	4bcc      	ldr	r3, [pc, #816]	@ (8001028 <main+0x370>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4bcb      	ldr	r3, [pc, #812]	@ (8001028 <main+0x370>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6a12      	ldr	r2, [r2, #32]
 8000d00:	621a      	str	r2, [r3, #32]

    // Inicijalizacija LED dioda - sve isključene na početku
    Set_LED_Mod1(0);
 8000d02:	2000      	movs	r0, #0
 8000d04:	f7ff fc86 	bl	8000614 <Set_LED_Mod1>
    Set_LED_Mod2(0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fc99 	bl	8000640 <Set_LED_Mod2>
    Set_LED_Mod3(0);
 8000d0e:	2000      	movs	r0, #0
 8000d10:	f7ff fcad 	bl	800066e <Set_LED_Mod3>

    // Inicijalizacija serva na početni položaj (180°)
    Servo_Set_Angle(180);
 8000d14:	20b4      	movs	r0, #180	@ 0xb4
 8000d16:	f7ff fc49 	bl	80005ac <Servo_Set_Angle>
    HAL_Delay(1000);  // Čekanje da servo dođe u početni položaj
 8000d1a:	23fa      	movs	r3, #250	@ 0xfa
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fc92 	bl	8001648 <HAL_Delay>

    // Inicijalizacija stepper motora - postavi na trenutnu poziciju
    stepper_target = stepper_position;
 8000d24:	4bc2      	ldr	r3, [pc, #776]	@ (8001030 <main+0x378>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	4bc2      	ldr	r3, [pc, #776]	@ (8001034 <main+0x37c>)
 8000d2a:	601a      	str	r2, [r3, #0]
    while(stepper_position != stepper_target) {
 8000d2c:	e004      	b.n	8000d38 <main+0x80>
        Stepper_Update();  // Ažuriraj poziciju steppera
 8000d2e:	f7ff fd25 	bl	800077c <Stepper_Update>
        HAL_Delay(1);      // Mali delay za stabilan rad
 8000d32:	2001      	movs	r0, #1
 8000d34:	f000 fc88 	bl	8001648 <HAL_Delay>
    while(stepper_position != stepper_target) {
 8000d38:	4bbd      	ldr	r3, [pc, #756]	@ (8001030 <main+0x378>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	4bbd      	ldr	r3, [pc, #756]	@ (8001034 <main+0x37c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d1f4      	bne.n	8000d2e <main+0x76>
    }
    HAL_Delay(1000);       // Čekanje prije početka rada
 8000d44:	23fa      	movs	r3, #250	@ 0xfa
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	0018      	movs	r0, r3
 8000d4a:	f000 fc7d 	bl	8001648 <HAL_Delay>

    // Inicijalno osvježavanje LED indikacija
    Update_Mode_LEDs();
 8000d4e:	f7ff fca5 	bl	800069c <Update_Mode_LEDs>

    // Inicijalizacija varijabli za glavnu petlju
    uint8_t servo_angle = 180;           // Početni kut serva
 8000d52:	230f      	movs	r3, #15
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	22b4      	movs	r2, #180	@ 0xb4
 8000d58:	701a      	strb	r2, [r3, #0]
    uint8_t servo_direction = 0;         // Smjer kretanja serva (0 = smanjuje se)
 8000d5a:	230e      	movs	r3, #14
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
    uint8_t object_detected_previous = 0;// Prethodno stanje detekcije objekta
 8000d62:	230d      	movs	r3, #13
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
    uint32_t last_measurement_time = 0;  // Vrijeme zadnjeg mjerenja
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
    uint32_t last_servo_move_time = 0;   // Vrijeme zadnjeg pomicanja serva
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]

    // GLAVNA PROGRAMSKА PETLJA
    while (1) {
        // Obrada pritisaka na tipkama
        Handle_Button_Presses();
 8000d72:	f7ff ff17 	bl	8000ba4 <Handle_Button_Presses>

        // Provjera timeouta za laser
        Check_Laser_Timeout();
 8000d76:	f7ff fbfd 	bl	8000574 <Check_Laser_Timeout>

        // MOD 2: Provjera timeouta za pauzu nakon detekcije
        if(operation_mode == 2 && mode2_active) {
 8000d7a:	4baf      	ldr	r3, [pc, #700]	@ (8001038 <main+0x380>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d115      	bne.n	8000dae <main+0xf6>
 8000d82:	4bae      	ldr	r3, [pc, #696]	@ (800103c <main+0x384>)
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d011      	beq.n	8000dae <main+0xf6>
            if(HAL_GetTick() - mode2_timer >= MODE2_TIMEOUT) {
 8000d8a:	f000 fc53 	bl	8001634 <HAL_GetTick>
 8000d8e:	0002      	movs	r2, r0
 8000d90:	4bab      	ldr	r3, [pc, #684]	@ (8001040 <main+0x388>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	4aab      	ldr	r2, [pc, #684]	@ (8001044 <main+0x38c>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d908      	bls.n	8000dae <main+0xf6>
                mode2_active = 0;
 8000d9c:	4ba7      	ldr	r3, [pc, #668]	@ (800103c <main+0x384>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
                mode2_servo_stopped = 0;
 8000da2:	4ba9      	ldr	r3, [pc, #676]	@ (8001048 <main+0x390>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	701a      	strb	r2, [r3, #0]
                Object_Detected = 0;
 8000da8:	4ba8      	ldr	r3, [pc, #672]	@ (800104c <main+0x394>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
            }
        }

        // MOD 3: Kontinuirano praćenje stanja tipka za ručno skeniranje
        if(operation_mode == 3) {
 8000dae:	4ba2      	ldr	r3, [pc, #648]	@ (8001038 <main+0x380>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	d000      	beq.n	8000db8 <main+0x100>
 8000db6:	e076      	b.n	8000ea6 <main+0x1ee>
            uint32_t current_time = HAL_GetTick();
 8000db8:	f000 fc3c 	bl	8001634 <HAL_GetTick>
 8000dbc:	0003      	movs	r3, r0
 8000dbe:	603b      	str	r3, [r7, #0]

            // Provjera stanja tipke svakih 50ms (debouncing)
            if(current_time - last_mode3_check_time >= 50) {
 8000dc0:	4ba3      	ldr	r3, [pc, #652]	@ (8001050 <main+0x398>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	683a      	ldr	r2, [r7, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2b31      	cmp	r3, #49	@ 0x31
 8000dca:	d910      	bls.n	8000dee <main+0x136>
                mode3_button_pressed = (HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin) == GPIO_PIN_SET);
 8000dcc:	2390      	movs	r3, #144	@ 0x90
 8000dce:	05db      	lsls	r3, r3, #23
 8000dd0:	2104      	movs	r1, #4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f000 fea2 	bl	8001b1c <HAL_GPIO_ReadPin>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	425a      	negs	r2, r3
 8000dde:	4153      	adcs	r3, r2
 8000de0:	b2db      	uxtb	r3, r3
 8000de2:	001a      	movs	r2, r3
 8000de4:	4b9b      	ldr	r3, [pc, #620]	@ (8001054 <main+0x39c>)
 8000de6:	701a      	strb	r2, [r3, #0]
                last_mode3_check_time = current_time;
 8000de8:	4b99      	ldr	r3, [pc, #612]	@ (8001050 <main+0x398>)
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	601a      	str	r2, [r3, #0]
            }

            // Ako je tipka pritisnuta, pomiči servo
            if(mode3_button_pressed) {
 8000dee:	4b99      	ldr	r3, [pc, #612]	@ (8001054 <main+0x39c>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d03f      	beq.n	8000e76 <main+0x1be>
                mode3_servo_moving = 1;
 8000df6:	4b98      	ldr	r3, [pc, #608]	@ (8001058 <main+0x3a0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
                mode3_scan_complete = 0;
 8000dfc:	4b97      	ldr	r3, [pc, #604]	@ (800105c <main+0x3a4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]

                // Pomakni servo svakih 20ms
                if(HAL_GetTick() - last_servo_move_time >= 20) {
 8000e02:	f000 fc17 	bl	8001634 <HAL_GetTick>
 8000e06:	0002      	movs	r2, r0
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	2b13      	cmp	r3, #19
 8000e0e:	d94a      	bls.n	8000ea6 <main+0x1ee>
                    if(servo_direction == 0) {
 8000e10:	200e      	movs	r0, #14
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d111      	bne.n	8000e3e <main+0x186>
                        servo_angle--;
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	187b      	adds	r3, r7, r1
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	3a01      	subs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
                        if(servo_angle <= 0) {
 8000e26:	000a      	movs	r2, r1
 8000e28:	18bb      	adds	r3, r7, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d117      	bne.n	8000e60 <main+0x1a8>
                            servo_angle = 0;
 8000e30:	18bb      	adds	r3, r7, r2
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]
                            servo_direction = 1;  // Promijeni smjer
 8000e36:	183b      	adds	r3, r7, r0
 8000e38:	2201      	movs	r2, #1
 8000e3a:	701a      	strb	r2, [r3, #0]
 8000e3c:	e010      	b.n	8000e60 <main+0x1a8>
                        }
                    } else {
                        servo_angle++;
 8000e3e:	210f      	movs	r1, #15
 8000e40:	187b      	adds	r3, r7, r1
 8000e42:	781a      	ldrb	r2, [r3, #0]
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	3201      	adds	r2, #1
 8000e48:	701a      	strb	r2, [r3, #0]
                        if(servo_angle >= 180) {
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	2bb3      	cmp	r3, #179	@ 0xb3
 8000e50:	d906      	bls.n	8000e60 <main+0x1a8>
                            servo_angle = 180;
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	22b4      	movs	r2, #180	@ 0xb4
 8000e56:	701a      	strb	r2, [r3, #0]
                            servo_direction = 0;  // Promijeni smjer
 8000e58:	230e      	movs	r3, #14
 8000e5a:	18fb      	adds	r3, r7, r3
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
                        }
                    }
                    Servo_Set_Angle(servo_angle);
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	0018      	movs	r0, r3
 8000e68:	f7ff fba0 	bl	80005ac <Servo_Set_Angle>
                    last_servo_move_time = HAL_GetTick();
 8000e6c:	f000 fbe2 	bl	8001634 <HAL_GetTick>
 8000e70:	0003      	movs	r3, r0
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	e017      	b.n	8000ea6 <main+0x1ee>
                }
            }
            // Ako je tipka otpuštena nakon skeniranja, okreni stepper prema objektu
            else if(mode3_servo_moving && !mode3_scan_complete) {
 8000e76:	4b78      	ldr	r3, [pc, #480]	@ (8001058 <main+0x3a0>)
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d013      	beq.n	8000ea6 <main+0x1ee>
 8000e7e:	4b77      	ldr	r3, [pc, #476]	@ (800105c <main+0x3a4>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10f      	bne.n	8000ea6 <main+0x1ee>
                mode3_scan_complete = 1;
 8000e86:	4b75      	ldr	r3, [pc, #468]	@ (800105c <main+0x3a4>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	701a      	strb	r2, [r3, #0]
                mode3_servo_moving = 0;
 8000e8c:	4b72      	ldr	r3, [pc, #456]	@ (8001058 <main+0x3a0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	701a      	strb	r2, [r3, #0]

                if(tracking_closest) {
 8000e92:	4b73      	ldr	r3, [pc, #460]	@ (8001060 <main+0x3a8>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <main+0x1ee>
                    last_detected_angle = closest_angle;
 8000e9a:	4b72      	ldr	r3, [pc, #456]	@ (8001064 <main+0x3ac>)
 8000e9c:	781a      	ldrb	r2, [r3, #0]
 8000e9e:	4b72      	ldr	r3, [pc, #456]	@ (8001068 <main+0x3b0>)
 8000ea0:	701a      	strb	r2, [r3, #0]
                    Stepper_Turn_To_Exact_Position();
 8000ea2:	f7ff fd03 	bl	80008ac <Stepper_Turn_To_Exact_Position>
                }
            }
        }

        // Pokreni mjerenje ultrazvučnim senzorom svakih 100ms
        if(HAL_GetTick() - last_measurement_time >= 100) {
 8000ea6:	f000 fbc5 	bl	8001634 <HAL_GetTick>
 8000eaa:	0002      	movs	r2, r0
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	1ad3      	subs	r3, r2, r3
 8000eb0:	2b63      	cmp	r3, #99	@ 0x63
 8000eb2:	d905      	bls.n	8000ec0 <main+0x208>
            HCSR04_Start_With_Filter();
 8000eb4:	f7ff fc3c 	bl	8000730 <HCSR04_Start_With_Filter>
            last_measurement_time = HAL_GetTick();
 8000eb8:	f000 fbbc 	bl	8001634 <HAL_GetTick>
 8000ebc:	0003      	movs	r3, r0
 8000ebe:	60bb      	str	r3, [r7, #8]
        }

        // Detekcija promjene stanja objekta (pojava/nestanak)
        if(Object_Detected && !object_detected_previous) {
 8000ec0:	4b62      	ldr	r3, [pc, #392]	@ (800104c <main+0x394>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d009      	beq.n	8000edc <main+0x224>
 8000ec8:	220d      	movs	r2, #13
 8000eca:	18bb      	adds	r3, r7, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d104      	bne.n	8000edc <main+0x224>
            object_detected_previous = Object_Detected;
 8000ed2:	18bb      	adds	r3, r7, r2
 8000ed4:	4a5d      	ldr	r2, [pc, #372]	@ (800104c <main+0x394>)
 8000ed6:	7812      	ldrb	r2, [r2, #0]
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e00c      	b.n	8000ef6 <main+0x23e>
        }
        else if(!Object_Detected && object_detected_previous) {
 8000edc:	4b5b      	ldr	r3, [pc, #364]	@ (800104c <main+0x394>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d108      	bne.n	8000ef6 <main+0x23e>
 8000ee4:	220d      	movs	r2, #13
 8000ee6:	18bb      	adds	r3, r7, r2
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d003      	beq.n	8000ef6 <main+0x23e>
            object_detected_previous = Object_Detected;
 8000eee:	18bb      	adds	r3, r7, r2
 8000ef0:	4a56      	ldr	r2, [pc, #344]	@ (800104c <main+0x394>)
 8000ef2:	7812      	ldrb	r2, [r2, #0]
 8000ef4:	701a      	strb	r2, [r3, #0]
        }

        // Ažuriraj LED indikatore trenutnog moda
        Update_Mode_LEDs();
 8000ef6:	f7ff fbd1 	bl	800069c <Update_Mode_LEDs>

        // MOD 1: Automatsko skeniranje - servo se kontinuirano okreće
        if(operation_mode == 1) {
 8000efa:	4b4f      	ldr	r3, [pc, #316]	@ (8001038 <main+0x380>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d144      	bne.n	8000f8c <main+0x2d4>
            if(HAL_GetTick() - last_servo_move_time >= 20) {
 8000f02:	f000 fb97 	bl	8001634 <HAL_GetTick>
 8000f06:	0002      	movs	r2, r0
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	2b13      	cmp	r3, #19
 8000f0e:	d800      	bhi.n	8000f12 <main+0x25a>
 8000f10:	e0ed      	b.n	80010ee <main+0x436>
                if(servo_direction == 0) {
 8000f12:	200e      	movs	r0, #14
 8000f14:	183b      	adds	r3, r7, r0
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d116      	bne.n	8000f4a <main+0x292>
                    servo_angle--;
 8000f1c:	210f      	movs	r1, #15
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	781a      	ldrb	r2, [r3, #0]
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	3a01      	subs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
                    if(servo_angle <= 0) {
 8000f28:	000a      	movs	r2, r1
 8000f2a:	18bb      	adds	r3, r7, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d121      	bne.n	8000f76 <main+0x2be>
                        servo_angle = 0;
 8000f32:	18bb      	adds	r3, r7, r2
 8000f34:	2200      	movs	r2, #0
 8000f36:	701a      	strb	r2, [r3, #0]
                        servo_direction = 1;
 8000f38:	183b      	adds	r3, r7, r0
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
                        HAL_Delay(500);  // Pauza na krajevima
 8000f3e:	23fa      	movs	r3, #250	@ 0xfa
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fb80 	bl	8001648 <HAL_Delay>
 8000f48:	e015      	b.n	8000f76 <main+0x2be>
                    }
                } else {
                    servo_angle++;
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781a      	ldrb	r2, [r3, #0]
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	3201      	adds	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]
                    if(servo_angle >= 180) {
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2bb3      	cmp	r3, #179	@ 0xb3
 8000f5c:	d90b      	bls.n	8000f76 <main+0x2be>
                        servo_angle = 180;
 8000f5e:	187b      	adds	r3, r7, r1
 8000f60:	22b4      	movs	r2, #180	@ 0xb4
 8000f62:	701a      	strb	r2, [r3, #0]
                        servo_direction = 0;
 8000f64:	230e      	movs	r3, #14
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]
                        HAL_Delay(500);  // Pauza na krajevima
 8000f6c:	23fa      	movs	r3, #250	@ 0xfa
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	0018      	movs	r0, r3
 8000f72:	f000 fb69 	bl	8001648 <HAL_Delay>
                    }
                }
                Servo_Set_Angle(servo_angle);
 8000f76:	230f      	movs	r3, #15
 8000f78:	18fb      	adds	r3, r7, r3
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	f7ff fb15 	bl	80005ac <Servo_Set_Angle>
                last_servo_move_time = HAL_GetTick();
 8000f82:	f000 fb57 	bl	8001634 <HAL_GetTick>
 8000f86:	0003      	movs	r3, r0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e0b0      	b.n	80010ee <main+0x436>
            }
        }
        // MOD 2: Automatsko skeniranje s pauzom na detekciji
        else if(operation_mode == 2) {
 8000f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8001038 <main+0x380>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	d16b      	bne.n	800106c <main+0x3b4>
            if(!mode2_servo_stopped && HAL_GetTick() - last_servo_move_time >= 20) {
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <main+0x390>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d000      	beq.n	8000f9e <main+0x2e6>
 8000f9c:	e0a7      	b.n	80010ee <main+0x436>
 8000f9e:	f000 fb49 	bl	8001634 <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b13      	cmp	r3, #19
 8000faa:	d800      	bhi.n	8000fae <main+0x2f6>
 8000fac:	e09f      	b.n	80010ee <main+0x436>
                if(servo_direction == 0) {
 8000fae:	200e      	movs	r0, #14
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d116      	bne.n	8000fe6 <main+0x32e>
                    servo_angle--;
 8000fb8:	210f      	movs	r1, #15
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	781a      	ldrb	r2, [r3, #0]
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	3a01      	subs	r2, #1
 8000fc2:	701a      	strb	r2, [r3, #0]
                    if(servo_angle <= 0) {
 8000fc4:	000a      	movs	r2, r1
 8000fc6:	18bb      	adds	r3, r7, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d121      	bne.n	8001012 <main+0x35a>
                        servo_angle = 0;
 8000fce:	18bb      	adds	r3, r7, r2
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
                        servo_direction = 1;
 8000fd4:	183b      	adds	r3, r7, r0
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	701a      	strb	r2, [r3, #0]
                        HAL_Delay(500);  // Pauza na krajevima
 8000fda:	23fa      	movs	r3, #250	@ 0xfa
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	0018      	movs	r0, r3
 8000fe0:	f000 fb32 	bl	8001648 <HAL_Delay>
 8000fe4:	e015      	b.n	8001012 <main+0x35a>
                    }
                } else {
                    servo_angle++;
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	781a      	ldrb	r2, [r3, #0]
 8000fec:	187b      	adds	r3, r7, r1
 8000fee:	3201      	adds	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
                    if(servo_angle >= 180) {
 8000ff2:	187b      	adds	r3, r7, r1
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2bb3      	cmp	r3, #179	@ 0xb3
 8000ff8:	d90b      	bls.n	8001012 <main+0x35a>
                        servo_angle = 180;
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	22b4      	movs	r2, #180	@ 0xb4
 8000ffe:	701a      	strb	r2, [r3, #0]
                        servo_direction = 0;
 8001000:	230e      	movs	r3, #14
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
                        HAL_Delay(500);  // Pauza na krajevima
 8001008:	23fa      	movs	r3, #250	@ 0xfa
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	0018      	movs	r0, r3
 800100e:	f000 fb1b 	bl	8001648 <HAL_Delay>
                    }
                }
                Servo_Set_Angle(servo_angle);
 8001012:	230f      	movs	r3, #15
 8001014:	18fb      	adds	r3, r7, r3
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	0018      	movs	r0, r3
 800101a:	f7ff fac7 	bl	80005ac <Servo_Set_Angle>
                last_servo_move_time = HAL_GetTick();
 800101e:	f000 fb09 	bl	8001634 <HAL_GetTick>
 8001022:	0003      	movs	r3, r0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e062      	b.n	80010ee <main+0x436>
 8001028:	200000a8 	.word	0x200000a8
 800102c:	200000f0 	.word	0x200000f0
 8001030:	20000064 	.word	0x20000064
 8001034:	20000068 	.word	0x20000068
 8001038:	20000020 	.word	0x20000020
 800103c:	20000074 	.word	0x20000074
 8001040:	20000070 	.word	0x20000070
 8001044:	00003a97 	.word	0x00003a97
 8001048:	20000075 	.word	0x20000075
 800104c:	2000005c 	.word	0x2000005c
 8001050:	200000a0 	.word	0x200000a0
 8001054:	2000009c 	.word	0x2000009c
 8001058:	2000009d 	.word	0x2000009d
 800105c:	2000009e 	.word	0x2000009e
 8001060:	20000095 	.word	0x20000095
 8001064:	20000094 	.word	0x20000094
 8001068:	20000076 	.word	0x20000076
            }
        }
        // MOD 3: Ručno skeniranje - servo se kreće samo dok je tipka pritisnuta
        else if(operation_mode == 3 && mode3_button_pressed) {
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <main+0x45c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d13c      	bne.n	80010ee <main+0x436>
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <main+0x460>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d038      	beq.n	80010ee <main+0x436>
            if(HAL_GetTick() - last_servo_move_time >= 20) {
 800107c:	f000 fada 	bl	8001634 <HAL_GetTick>
 8001080:	0002      	movs	r2, r0
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b13      	cmp	r3, #19
 8001088:	d931      	bls.n	80010ee <main+0x436>
                if(servo_direction == 0) {
 800108a:	200e      	movs	r0, #14
 800108c:	183b      	adds	r3, r7, r0
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d111      	bne.n	80010b8 <main+0x400>
                    servo_angle--;
 8001094:	210f      	movs	r1, #15
 8001096:	187b      	adds	r3, r7, r1
 8001098:	781a      	ldrb	r2, [r3, #0]
 800109a:	187b      	adds	r3, r7, r1
 800109c:	3a01      	subs	r2, #1
 800109e:	701a      	strb	r2, [r3, #0]
                    if(servo_angle <= 0) {
 80010a0:	000a      	movs	r2, r1
 80010a2:	18bb      	adds	r3, r7, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d117      	bne.n	80010da <main+0x422>
                        servo_angle = 0;
 80010aa:	18bb      	adds	r3, r7, r2
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
                        servo_direction = 1;
 80010b0:	183b      	adds	r3, r7, r0
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
 80010b6:	e010      	b.n	80010da <main+0x422>
                    }
                } else {
                    servo_angle++;
 80010b8:	210f      	movs	r1, #15
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	781a      	ldrb	r2, [r3, #0]
 80010be:	187b      	adds	r3, r7, r1
 80010c0:	3201      	adds	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
                    if(servo_angle >= 180) {
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2bb3      	cmp	r3, #179	@ 0xb3
 80010ca:	d906      	bls.n	80010da <main+0x422>
                        servo_angle = 180;
 80010cc:	187b      	adds	r3, r7, r1
 80010ce:	22b4      	movs	r2, #180	@ 0xb4
 80010d0:	701a      	strb	r2, [r3, #0]
                        servo_direction = 0;
 80010d2:	230e      	movs	r3, #14
 80010d4:	18fb      	adds	r3, r7, r3
 80010d6:	2200      	movs	r2, #0
 80010d8:	701a      	strb	r2, [r3, #0]
                    }
                }
                Servo_Set_Angle(servo_angle);
 80010da:	230f      	movs	r3, #15
 80010dc:	18fb      	adds	r3, r7, r3
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff fa63 	bl	80005ac <Servo_Set_Angle>
                last_servo_move_time = HAL_GetTick();
 80010e6:	f000 faa5 	bl	8001634 <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	607b      	str	r3, [r7, #4]
            }
        }

        // Ažuriraj poziciju stepper motora
        Stepper_Update();
 80010ee:	f7ff fb45 	bl	800077c <Stepper_Update>
        if(stepper_position == stepper_target && laser_active) {
            // Laser će se automatski isključiti nakon 5 sekundi
        }

        // Resetiranje memorije pozicije nakon određenog vremena
        if(HAL_GetTick() - last_detection_time > ANGLE_MEMORY_TIME) {
 80010f2:	f000 fa9f 	bl	8001634 <HAL_GetTick>
 80010f6:	0002      	movs	r2, r0
 80010f8:	4b08      	ldr	r3, [pc, #32]	@ (800111c <main+0x464>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	23fa      	movs	r3, #250	@ 0xfa
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	429a      	cmp	r2, r3
 8001104:	d902      	bls.n	800110c <main+0x454>
            last_detected_angle = 0;
 8001106:	4b06      	ldr	r3, [pc, #24]	@ (8001120 <main+0x468>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
        }

        // Mali delay za stabilnost
        HAL_Delay(1);
 800110c:	2001      	movs	r0, #1
 800110e:	f000 fa9b 	bl	8001648 <HAL_Delay>
        Handle_Button_Presses();
 8001112:	e62e      	b.n	8000d72 <main+0xba>
 8001114:	20000020 	.word	0x20000020
 8001118:	2000009c 	.word	0x2000009c
 800111c:	20000078 	.word	0x20000078
 8001120:	20000076 	.word	0x20000076

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b590      	push	{r4, r7, lr}
 8001126:	b091      	sub	sp, #68	@ 0x44
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	2410      	movs	r4, #16
 800112c:	193b      	adds	r3, r7, r4
 800112e:	0018      	movs	r0, r3
 8001130:	2330      	movs	r3, #48	@ 0x30
 8001132:	001a      	movs	r2, r3
 8001134:	2100      	movs	r1, #0
 8001136:	f002 faeb 	bl	8003710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113a:	003b      	movs	r3, r7
 800113c:	0018      	movs	r0, r3
 800113e:	2310      	movs	r3, #16
 8001140:	001a      	movs	r2, r3
 8001142:	2100      	movs	r1, #0
 8001144:	f002 fae4 	bl	8003710 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	0021      	movs	r1, r4
 800114a:	187b      	adds	r3, r7, r1
 800114c:	2202      	movs	r2, #2
 800114e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001150:	187b      	adds	r3, r7, r1
 8001152:	2201      	movs	r2, #1
 8001154:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001156:	187b      	adds	r3, r7, r1
 8001158:	2210      	movs	r2, #16
 800115a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800115c:	187b      	adds	r3, r7, r1
 800115e:	2200      	movs	r2, #0
 8001160:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001162:	187b      	adds	r3, r7, r1
 8001164:	0018      	movs	r0, r3
 8001166:	f000 fd2f 	bl	8001bc8 <HAL_RCC_OscConfig>
 800116a:	1e03      	subs	r3, r0, #0
 800116c:	d001      	beq.n	8001172 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800116e:	f000 f819 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001172:	003b      	movs	r3, r7
 8001174:	2207      	movs	r2, #7
 8001176:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001178:	003b      	movs	r3, r7
 800117a:	2200      	movs	r2, #0
 800117c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800117e:	003b      	movs	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001184:	003b      	movs	r3, r7
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800118a:	003b      	movs	r3, r7
 800118c:	2100      	movs	r1, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f001 f834 	bl	80021fc <HAL_RCC_ClockConfig>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001198:	f000 f804 	bl	80011a4 <Error_Handler>
  }
}
 800119c:	46c0      	nop			@ (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	b011      	add	sp, #68	@ 0x44
 80011a2:	bd90      	pop	{r4, r7, pc}

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <HAL_MspInit+0x44>)
 80011b8:	699a      	ldr	r2, [r3, #24]
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_MspInit+0x44>)
 80011bc:	2101      	movs	r1, #1
 80011be:	430a      	orrs	r2, r1
 80011c0:	619a      	str	r2, [r3, #24]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_MspInit+0x44>)
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	2201      	movs	r2, #1
 80011c8:	4013      	ands	r3, r2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <HAL_MspInit+0x44>)
 80011d4:	2180      	movs	r1, #128	@ 0x80
 80011d6:	0549      	lsls	r1, r1, #21
 80011d8:	430a      	orrs	r2, r1
 80011da:	61da      	str	r2, [r3, #28]
 80011dc:	4b05      	ldr	r3, [pc, #20]	@ (80011f4 <HAL_MspInit+0x44>)
 80011de:	69da      	ldr	r2, [r3, #28]
 80011e0:	2380      	movs	r3, #128	@ 0x80
 80011e2:	055b      	lsls	r3, r3, #21
 80011e4:	4013      	ands	r3, r2
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	46c0      	nop			@ (mov r8, r8)
 80011f4:	40021000 	.word	0x40021000

080011f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011fc:	46c0      	nop			@ (mov r8, r8)
 80011fe:	e7fd      	b.n	80011fc <NMI_Handler+0x4>

08001200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	e7fd      	b.n	8001204 <HardFault_Handler+0x4>

08001208 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800120c:	46c0      	nop			@ (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001220:	f000 f9f6 	bl	8001610 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 fcae 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001234:	2002      	movs	r0, #2
 8001236:	f000 fcab 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001244:	2004      	movs	r0, #4
 8001246:	f000 fca3 	bl	8001b90 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800124a:	46c0      	nop			@ (mov r8, r8)
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001254:	4b03      	ldr	r3, [pc, #12]	@ (8001264 <TIM2_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f001 fba0 	bl	800299c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800125c:	46c0      	nop			@ (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			@ (mov r8, r8)
 8001264:	200000a8 	.word	0x200000a8

08001268 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127a:	2310      	movs	r3, #16
 800127c:	18fb      	adds	r3, r7, r3
 800127e:	0018      	movs	r0, r3
 8001280:	2308      	movs	r3, #8
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f002 fa43 	bl	8003710 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 800128a:	003b      	movs	r3, r7
 800128c:	0018      	movs	r0, r3
 800128e:	2310      	movs	r3, #16
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f002 fa3c 	bl	8003710 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001298:	4b23      	ldr	r3, [pc, #140]	@ (8001328 <MX_TIM2_Init+0xb4>)
 800129a:	2280      	movs	r2, #128	@ 0x80
 800129c:	05d2      	lsls	r2, r2, #23
 800129e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80012a0:	4b21      	ldr	r3, [pc, #132]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012a2:	2207      	movs	r2, #7
 80012a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b20      	ldr	r3, [pc, #128]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80012ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	4252      	negs	r2, r2
 80012b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012c0:	4b19      	ldr	r3, [pc, #100]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fa12 	bl	80026ec <HAL_TIM_IC_Init>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f7ff ff6a 	bl	80011a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2110      	movs	r1, #16
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012de:	187a      	adds	r2, r7, r1
 80012e0:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <MX_TIM2_Init+0xb4>)
 80012e2:	0011      	movs	r1, r2
 80012e4:	0018      	movs	r0, r3
 80012e6:	f002 f9ab 	bl	8003640 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	1e03      	subs	r3, r0, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012ee:	f7ff ff59 	bl	80011a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012f2:	003b      	movs	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012f8:	003b      	movs	r3, r7
 80012fa:	2201      	movs	r2, #1
 80012fc:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012fe:	003b      	movs	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8001304:	003b      	movs	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800130a:	0039      	movs	r1, r7
 800130c:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <MX_TIM2_Init+0xb4>)
 800130e:	2200      	movs	r2, #0
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fc31 	bl	8002b78 <HAL_TIM_IC_ConfigChannel>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800131a:	f7ff ff43 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800131e:	46c0      	nop			@ (mov r8, r8)
 8001320:	46bd      	mov	sp, r7
 8001322:	b006      	add	sp, #24
 8001324:	bd80      	pop	{r7, pc}
 8001326:	46c0      	nop			@ (mov r8, r8)
 8001328:	200000a8 	.word	0x200000a8

0800132c <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	0018      	movs	r0, r3
 8001336:	231c      	movs	r3, #28
 8001338:	001a      	movs	r2, r3
 800133a:	2100      	movs	r1, #0
 800133c:	f002 f9e8 	bl	8003710 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001342:	4a20      	ldr	r2, [pc, #128]	@ (80013c4 <MX_TIM14_Init+0x98>)
 8001344:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 7;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001348:	2207      	movs	r2, #7
 800134a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134c:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 19999;
 8001352:	4b1b      	ldr	r3, [pc, #108]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001354:	4a1c      	ldr	r2, [pc, #112]	@ (80013c8 <MX_TIM14_Init+0x9c>)
 8001356:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_TIM14_Init+0x94>)
 800135a:	2200      	movs	r2, #0
 800135c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135e:	4b18      	ldr	r3, [pc, #96]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001364:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001366:	0018      	movs	r0, r3
 8001368:	f001 f86c 	bl	8002444 <HAL_TIM_Base_Init>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001370:	f7ff ff18 	bl	80011a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001374:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <MX_TIM14_Init+0x94>)
 8001376:	0018      	movs	r0, r3
 8001378:	f001 f8b4 	bl	80024e4 <HAL_TIM_PWM_Init>
 800137c:	1e03      	subs	r3, r0, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001380:	f7ff ff10 	bl	80011a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	1d3b      	adds	r3, r7, #4
 8001386:	2260      	movs	r2, #96	@ 0x60
 8001388:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	2200      	movs	r2, #0
 800138e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001390:	1d3b      	adds	r3, r7, #4
 8001392:	2200      	movs	r2, #0
 8001394:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800139c:	1d39      	adds	r1, r7, #4
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	0018      	movs	r0, r3
 80013a4:	f001 fc8c 	bl	8002cc0 <HAL_TIM_PWM_ConfigChannel>
 80013a8:	1e03      	subs	r3, r0, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80013ac:	f7ff fefa 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <MX_TIM14_Init+0x94>)
 80013b2:	0018      	movs	r0, r3
 80013b4:	f000 f87c 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 80013b8:	46c0      	nop			@ (mov r8, r8)
 80013ba:	46bd      	mov	sp, r7
 80013bc:	b008      	add	sp, #32
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200000f0 	.word	0x200000f0
 80013c4:	40002000 	.word	0x40002000
 80013c8:	00004e1f 	.word	0x00004e1f

080013cc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80013cc:	b590      	push	{r4, r7, lr}
 80013ce:	b08b      	sub	sp, #44	@ 0x2c
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	2414      	movs	r4, #20
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	0018      	movs	r0, r3
 80013da:	2314      	movs	r3, #20
 80013dc:	001a      	movs	r2, r3
 80013de:	2100      	movs	r1, #0
 80013e0:	f002 f996 	bl	8003710 <memset>
  if(tim_icHandle->Instance==TIM2)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	2380      	movs	r3, #128	@ 0x80
 80013ea:	05db      	lsls	r3, r3, #23
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d138      	bne.n	8001462 <HAL_TIM_IC_MspInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013f0:	4b1e      	ldr	r3, [pc, #120]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 80013f2:	69da      	ldr	r2, [r3, #28]
 80013f4:	4b1d      	ldr	r3, [pc, #116]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	61da      	str	r2, [r3, #28]
 80013fc:	4b1b      	ldr	r3, [pc, #108]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 80013fe:	69db      	ldr	r3, [r3, #28]
 8001400:	2201      	movs	r2, #1
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001408:	4b18      	ldr	r3, [pc, #96]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 800140a:	695a      	ldr	r2, [r3, #20]
 800140c:	4b17      	ldr	r3, [pc, #92]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 800140e:	2180      	movs	r1, #128	@ 0x80
 8001410:	0289      	lsls	r1, r1, #10
 8001412:	430a      	orrs	r2, r1
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <HAL_TIM_IC_MspInit+0xa0>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	029b      	lsls	r3, r3, #10
 800141e:	4013      	ands	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001424:	0021      	movs	r1, r4
 8001426:	187b      	adds	r3, r7, r1
 8001428:	2201      	movs	r2, #1
 800142a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	187b      	adds	r3, r7, r1
 800142e:	2202      	movs	r2, #2
 8001430:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001432:	187b      	adds	r3, r7, r1
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	187b      	adds	r3, r7, r1
 800143a:	2200      	movs	r2, #0
 800143c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800143e:	187b      	adds	r3, r7, r1
 8001440:	2202      	movs	r2, #2
 8001442:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001444:	187a      	adds	r2, r7, r1
 8001446:	2390      	movs	r3, #144	@ 0x90
 8001448:	05db      	lsls	r3, r3, #23
 800144a:	0011      	movs	r1, r2
 800144c:	0018      	movs	r0, r3
 800144e:	f000 f9fd 	bl	800184c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	200f      	movs	r0, #15
 8001458:	f000 f9c6 	bl	80017e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800145c:	200f      	movs	r0, #15
 800145e:	f000 f9d8 	bl	8001812 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001462:	46c0      	nop			@ (mov r8, r8)
 8001464:	46bd      	mov	sp, r7
 8001466:	b00b      	add	sp, #44	@ 0x2c
 8001468:	bd90      	pop	{r4, r7, pc}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	40021000 	.word	0x40021000

08001470 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM14)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <HAL_TIM_Base_MspInit+0x38>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d10d      	bne.n	800149e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* TIM14 clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	@ (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	69da      	ldr	r2, [r3, #28]
 8001486:	4b09      	ldr	r3, [pc, #36]	@ (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001488:	2180      	movs	r1, #128	@ 0x80
 800148a:	0049      	lsls	r1, r1, #1
 800148c:	430a      	orrs	r2, r1
 800148e:	61da      	str	r2, [r3, #28]
 8001490:	4b06      	ldr	r3, [pc, #24]	@ (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4013      	ands	r3, r2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	46bd      	mov	sp, r7
 80014a2:	b004      	add	sp, #16
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	40002000 	.word	0x40002000
 80014ac:	40021000 	.word	0x40021000

080014b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b089      	sub	sp, #36	@ 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	240c      	movs	r4, #12
 80014ba:	193b      	adds	r3, r7, r4
 80014bc:	0018      	movs	r0, r3
 80014be:	2314      	movs	r3, #20
 80014c0:	001a      	movs	r2, r3
 80014c2:	2100      	movs	r1, #0
 80014c4:	f002 f924 	bl	8003710 <memset>
  if(timHandle->Instance==TIM14)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a15      	ldr	r2, [pc, #84]	@ (8001524 <HAL_TIM_MspPostInit+0x74>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d124      	bne.n	800151c <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <HAL_TIM_MspPostInit+0x78>)
 80014d4:	695a      	ldr	r2, [r3, #20]
 80014d6:	4b14      	ldr	r3, [pc, #80]	@ (8001528 <HAL_TIM_MspPostInit+0x78>)
 80014d8:	2180      	movs	r1, #128	@ 0x80
 80014da:	0289      	lsls	r1, r1, #10
 80014dc:	430a      	orrs	r2, r1
 80014de:	615a      	str	r2, [r3, #20]
 80014e0:	4b11      	ldr	r3, [pc, #68]	@ (8001528 <HAL_TIM_MspPostInit+0x78>)
 80014e2:	695a      	ldr	r2, [r3, #20]
 80014e4:	2380      	movs	r3, #128	@ 0x80
 80014e6:	029b      	lsls	r3, r3, #10
 80014e8:	4013      	ands	r3, r2
 80014ea:	60bb      	str	r3, [r7, #8]
 80014ec:	68bb      	ldr	r3, [r7, #8]
    /**TIM14 GPIO Configuration
    PA7     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80014ee:	0021      	movs	r1, r4
 80014f0:	187b      	adds	r3, r7, r1
 80014f2:	2280      	movs	r2, #128	@ 0x80
 80014f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	187b      	adds	r3, r7, r1
 80014f8:	2202      	movs	r2, #2
 80014fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM14;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2204      	movs	r2, #4
 800150c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	187a      	adds	r2, r7, r1
 8001510:	2390      	movs	r3, #144	@ 0x90
 8001512:	05db      	lsls	r3, r3, #23
 8001514:	0011      	movs	r1, r2
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f998 	bl	800184c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 800151c:	46c0      	nop			@ (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	b009      	add	sp, #36	@ 0x24
 8001522:	bd90      	pop	{r4, r7, pc}
 8001524:	40002000 	.word	0x40002000
 8001528:	40021000 	.word	0x40021000

0800152c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800152c:	480d      	ldr	r0, [pc, #52]	@ (8001564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800152e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001530:	f7ff fe9a 	bl	8001268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001534:	480c      	ldr	r0, [pc, #48]	@ (8001568 <LoopForever+0x6>)
  ldr r1, =_edata
 8001536:	490d      	ldr	r1, [pc, #52]	@ (800156c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001538:	4a0d      	ldr	r2, [pc, #52]	@ (8001570 <LoopForever+0xe>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800153c:	e002      	b.n	8001544 <LoopCopyDataInit>

0800153e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001540:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001542:	3304      	adds	r3, #4

08001544 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001544:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001546:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001548:	d3f9      	bcc.n	800153e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800154a:	4a0a      	ldr	r2, [pc, #40]	@ (8001574 <LoopForever+0x12>)
  ldr r4, =_ebss
 800154c:	4c0a      	ldr	r4, [pc, #40]	@ (8001578 <LoopForever+0x16>)
  movs r3, #0
 800154e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001550:	e001      	b.n	8001556 <LoopFillZerobss>

08001552 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001552:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001554:	3204      	adds	r2, #4

08001556 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001556:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001558:	d3fb      	bcc.n	8001552 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800155a:	f002 f8e1 	bl	8003720 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800155e:	f7ff fbab 	bl	8000cb8 <main>

08001562 <LoopForever>:

LoopForever:
    b LoopForever
 8001562:	e7fe      	b.n	8001562 <LoopForever>
  ldr   r0, =_estack
 8001564:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8001570:	080037b8 	.word	0x080037b8
  ldr r2, =_sbss
 8001574:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8001578:	2000013c 	.word	0x2000013c

0800157c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC1_IRQHandler>
	...

08001580 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <HAL_Init+0x24>)
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <HAL_Init+0x24>)
 800158a:	2110      	movs	r1, #16
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001590:	2003      	movs	r0, #3
 8001592:	f000 f809 	bl	80015a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001596:	f7ff fe0b 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	0018      	movs	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	46c0      	nop			@ (mov r8, r8)
 80015a4:	40022000 	.word	0x40022000

080015a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <HAL_InitTick+0x5c>)
 80015b2:	681c      	ldr	r4, [r3, #0]
 80015b4:	4b14      	ldr	r3, [pc, #80]	@ (8001608 <HAL_InitTick+0x60>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	0019      	movs	r1, r3
 80015ba:	23fa      	movs	r3, #250	@ 0xfa
 80015bc:	0098      	lsls	r0, r3, #2
 80015be:	f7fe fda3 	bl	8000108 <__udivsi3>
 80015c2:	0003      	movs	r3, r0
 80015c4:	0019      	movs	r1, r3
 80015c6:	0020      	movs	r0, r4
 80015c8:	f7fe fd9e 	bl	8000108 <__udivsi3>
 80015cc:	0003      	movs	r3, r0
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 f92f 	bl	8001832 <HAL_SYSTICK_Config>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	e00f      	b.n	80015fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b03      	cmp	r3, #3
 80015e0:	d80b      	bhi.n	80015fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	2301      	movs	r3, #1
 80015e6:	425b      	negs	r3, r3
 80015e8:	2200      	movs	r2, #0
 80015ea:	0018      	movs	r0, r3
 80015ec:	f000 f8fc 	bl	80017e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <HAL_InitTick+0x64>)
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015f6:	2300      	movs	r3, #0
 80015f8:	e000      	b.n	80015fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b003      	add	sp, #12
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	20000024 	.word	0x20000024
 8001608:	2000002c 	.word	0x2000002c
 800160c:	20000028 	.word	0x20000028

08001610 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001614:	4b05      	ldr	r3, [pc, #20]	@ (800162c <HAL_IncTick+0x1c>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	001a      	movs	r2, r3
 800161a:	4b05      	ldr	r3, [pc, #20]	@ (8001630 <HAL_IncTick+0x20>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	18d2      	adds	r2, r2, r3
 8001620:	4b03      	ldr	r3, [pc, #12]	@ (8001630 <HAL_IncTick+0x20>)
 8001622:	601a      	str	r2, [r3, #0]
}
 8001624:	46c0      	nop			@ (mov r8, r8)
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	46c0      	nop			@ (mov r8, r8)
 800162c:	2000002c 	.word	0x2000002c
 8001630:	20000138 	.word	0x20000138

08001634 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  return uwTick;
 8001638:	4b02      	ldr	r3, [pc, #8]	@ (8001644 <HAL_GetTick+0x10>)
 800163a:	681b      	ldr	r3, [r3, #0]
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			@ (mov r8, r8)
 8001644:	20000138 	.word	0x20000138

08001648 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b084      	sub	sp, #16
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001650:	f7ff fff0 	bl	8001634 <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	3301      	adds	r3, #1
 8001660:	d005      	beq.n	800166e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_Delay+0x44>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	001a      	movs	r2, r3
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	189b      	adds	r3, r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	f7ff ffe0 	bl	8001634 <HAL_GetTick>
 8001674:	0002      	movs	r2, r0
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	429a      	cmp	r2, r3
 800167e:	d8f7      	bhi.n	8001670 <HAL_Delay+0x28>
  {
  }
}
 8001680:	46c0      	nop			@ (mov r8, r8)
 8001682:	46c0      	nop			@ (mov r8, r8)
 8001684:	46bd      	mov	sp, r7
 8001686:	b004      	add	sp, #16
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			@ (mov r8, r8)
 800168c:	2000002c 	.word	0x2000002c

08001690 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	0002      	movs	r2, r0
 8001698:	1dfb      	adds	r3, r7, #7
 800169a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800169c:	1dfb      	adds	r3, r7, #7
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80016a2:	d809      	bhi.n	80016b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a4:	1dfb      	adds	r3, r7, #7
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	001a      	movs	r2, r3
 80016aa:	231f      	movs	r3, #31
 80016ac:	401a      	ands	r2, r3
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <__NVIC_EnableIRQ+0x30>)
 80016b0:	2101      	movs	r1, #1
 80016b2:	4091      	lsls	r1, r2
 80016b4:	000a      	movs	r2, r1
 80016b6:	601a      	str	r2, [r3, #0]
  }
}
 80016b8:	46c0      	nop			@ (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b002      	add	sp, #8
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	e000e100 	.word	0xe000e100

080016c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c4:	b590      	push	{r4, r7, lr}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	0002      	movs	r2, r0
 80016cc:	6039      	str	r1, [r7, #0]
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80016d2:	1dfb      	adds	r3, r7, #7
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016d8:	d828      	bhi.n	800172c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016da:	4a2f      	ldr	r2, [pc, #188]	@ (8001798 <__NVIC_SetPriority+0xd4>)
 80016dc:	1dfb      	adds	r3, r7, #7
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	089b      	lsrs	r3, r3, #2
 80016e4:	33c0      	adds	r3, #192	@ 0xc0
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	589b      	ldr	r3, [r3, r2]
 80016ea:	1dfa      	adds	r2, r7, #7
 80016ec:	7812      	ldrb	r2, [r2, #0]
 80016ee:	0011      	movs	r1, r2
 80016f0:	2203      	movs	r2, #3
 80016f2:	400a      	ands	r2, r1
 80016f4:	00d2      	lsls	r2, r2, #3
 80016f6:	21ff      	movs	r1, #255	@ 0xff
 80016f8:	4091      	lsls	r1, r2
 80016fa:	000a      	movs	r2, r1
 80016fc:	43d2      	mvns	r2, r2
 80016fe:	401a      	ands	r2, r3
 8001700:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	019b      	lsls	r3, r3, #6
 8001706:	22ff      	movs	r2, #255	@ 0xff
 8001708:	401a      	ands	r2, r3
 800170a:	1dfb      	adds	r3, r7, #7
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	2303      	movs	r3, #3
 8001712:	4003      	ands	r3, r0
 8001714:	00db      	lsls	r3, r3, #3
 8001716:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001718:	481f      	ldr	r0, [pc, #124]	@ (8001798 <__NVIC_SetPriority+0xd4>)
 800171a:	1dfb      	adds	r3, r7, #7
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	b25b      	sxtb	r3, r3
 8001720:	089b      	lsrs	r3, r3, #2
 8001722:	430a      	orrs	r2, r1
 8001724:	33c0      	adds	r3, #192	@ 0xc0
 8001726:	009b      	lsls	r3, r3, #2
 8001728:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800172a:	e031      	b.n	8001790 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800172c:	4a1b      	ldr	r2, [pc, #108]	@ (800179c <__NVIC_SetPriority+0xd8>)
 800172e:	1dfb      	adds	r3, r7, #7
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	0019      	movs	r1, r3
 8001734:	230f      	movs	r3, #15
 8001736:	400b      	ands	r3, r1
 8001738:	3b08      	subs	r3, #8
 800173a:	089b      	lsrs	r3, r3, #2
 800173c:	3306      	adds	r3, #6
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	18d3      	adds	r3, r2, r3
 8001742:	3304      	adds	r3, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	1dfa      	adds	r2, r7, #7
 8001748:	7812      	ldrb	r2, [r2, #0]
 800174a:	0011      	movs	r1, r2
 800174c:	2203      	movs	r2, #3
 800174e:	400a      	ands	r2, r1
 8001750:	00d2      	lsls	r2, r2, #3
 8001752:	21ff      	movs	r1, #255	@ 0xff
 8001754:	4091      	lsls	r1, r2
 8001756:	000a      	movs	r2, r1
 8001758:	43d2      	mvns	r2, r2
 800175a:	401a      	ands	r2, r3
 800175c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	019b      	lsls	r3, r3, #6
 8001762:	22ff      	movs	r2, #255	@ 0xff
 8001764:	401a      	ands	r2, r3
 8001766:	1dfb      	adds	r3, r7, #7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	0018      	movs	r0, r3
 800176c:	2303      	movs	r3, #3
 800176e:	4003      	ands	r3, r0
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001774:	4809      	ldr	r0, [pc, #36]	@ (800179c <__NVIC_SetPriority+0xd8>)
 8001776:	1dfb      	adds	r3, r7, #7
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	001c      	movs	r4, r3
 800177c:	230f      	movs	r3, #15
 800177e:	4023      	ands	r3, r4
 8001780:	3b08      	subs	r3, #8
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	430a      	orrs	r2, r1
 8001786:	3306      	adds	r3, #6
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	18c3      	adds	r3, r0, r3
 800178c:	3304      	adds	r3, #4
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b003      	add	sp, #12
 8001796:	bd90      	pop	{r4, r7, pc}
 8001798:	e000e100 	.word	0xe000e100
 800179c:	e000ed00 	.word	0xe000ed00

080017a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	1e5a      	subs	r2, r3, #1
 80017ac:	2380      	movs	r3, #128	@ 0x80
 80017ae:	045b      	lsls	r3, r3, #17
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d301      	bcc.n	80017b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017b4:	2301      	movs	r3, #1
 80017b6:	e010      	b.n	80017da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017b8:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <SysTick_Config+0x44>)
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	3a01      	subs	r2, #1
 80017be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017c0:	2301      	movs	r3, #1
 80017c2:	425b      	negs	r3, r3
 80017c4:	2103      	movs	r1, #3
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff7c 	bl	80016c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017cc:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <SysTick_Config+0x44>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017d2:	4b04      	ldr	r3, [pc, #16]	@ (80017e4 <SysTick_Config+0x44>)
 80017d4:	2207      	movs	r2, #7
 80017d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017d8:	2300      	movs	r3, #0
}
 80017da:	0018      	movs	r0, r3
 80017dc:	46bd      	mov	sp, r7
 80017de:	b002      	add	sp, #8
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			@ (mov r8, r8)
 80017e4:	e000e010 	.word	0xe000e010

080017e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	210f      	movs	r1, #15
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	1c02      	adds	r2, r0, #0
 80017f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017fa:	68ba      	ldr	r2, [r7, #8]
 80017fc:	187b      	adds	r3, r7, r1
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	b25b      	sxtb	r3, r3
 8001802:	0011      	movs	r1, r2
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff ff5d 	bl	80016c4 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800180a:	46c0      	nop			@ (mov r8, r8)
 800180c:	46bd      	mov	sp, r7
 800180e:	b004      	add	sp, #16
 8001810:	bd80      	pop	{r7, pc}

08001812 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	0002      	movs	r2, r0
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800181e:	1dfb      	adds	r3, r7, #7
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	b25b      	sxtb	r3, r3
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff ff33 	bl	8001690 <__NVIC_EnableIRQ>
}
 800182a:	46c0      	nop			@ (mov r8, r8)
 800182c:	46bd      	mov	sp, r7
 800182e:	b002      	add	sp, #8
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff ffaf 	bl	80017a0 <SysTick_Config>
 8001842:	0003      	movs	r3, r0
}
 8001844:	0018      	movs	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	b002      	add	sp, #8
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185a:	e149      	b.n	8001af0 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2101      	movs	r1, #1
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4091      	lsls	r1, r2
 8001866:	000a      	movs	r2, r1
 8001868:	4013      	ands	r3, r2
 800186a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d100      	bne.n	8001874 <HAL_GPIO_Init+0x28>
 8001872:	e13a      	b.n	8001aea <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	2203      	movs	r2, #3
 800187a:	4013      	ands	r3, r2
 800187c:	2b01      	cmp	r3, #1
 800187e:	d005      	beq.n	800188c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2203      	movs	r2, #3
 8001886:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001888:	2b02      	cmp	r3, #2
 800188a:	d130      	bne.n	80018ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	409a      	lsls	r2, r3
 800189a:	0013      	movs	r3, r2
 800189c:	43da      	mvns	r2, r3
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	409a      	lsls	r2, r3
 80018ae:	0013      	movs	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c2:	2201      	movs	r2, #1
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	409a      	lsls	r2, r3
 80018c8:	0013      	movs	r3, r2
 80018ca:	43da      	mvns	r2, r3
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	4013      	ands	r3, r2
 80018d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	091b      	lsrs	r3, r3, #4
 80018d8:	2201      	movs	r2, #1
 80018da:	401a      	ands	r2, r3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	409a      	lsls	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	2203      	movs	r2, #3
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b03      	cmp	r3, #3
 80018f8:	d017      	beq.n	800192a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	2203      	movs	r2, #3
 8001906:	409a      	lsls	r2, r3
 8001908:	0013      	movs	r3, r2
 800190a:	43da      	mvns	r2, r3
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	409a      	lsls	r2, r3
 800191c:	0013      	movs	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2203      	movs	r2, #3
 8001930:	4013      	ands	r3, r2
 8001932:	2b02      	cmp	r3, #2
 8001934:	d123      	bne.n	800197e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	0092      	lsls	r2, r2, #2
 8001940:	58d3      	ldr	r3, [r2, r3]
 8001942:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	2207      	movs	r2, #7
 8001948:	4013      	ands	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	409a      	lsls	r2, r3
 8001950:	0013      	movs	r3, r2
 8001952:	43da      	mvns	r2, r3
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	2107      	movs	r1, #7
 8001962:	400b      	ands	r3, r1
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	409a      	lsls	r2, r3
 8001968:	0013      	movs	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	0092      	lsls	r2, r2, #2
 800197a:	6939      	ldr	r1, [r7, #16]
 800197c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	409a      	lsls	r2, r3
 800198c:	0013      	movs	r3, r2
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2203      	movs	r2, #3
 800199c:	401a      	ands	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	409a      	lsls	r2, r3
 80019a4:	0013      	movs	r3, r2
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685a      	ldr	r2, [r3, #4]
 80019b6:	23c0      	movs	r3, #192	@ 0xc0
 80019b8:	029b      	lsls	r3, r3, #10
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_GPIO_Init+0x174>
 80019be:	e094      	b.n	8001aea <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c0:	4b51      	ldr	r3, [pc, #324]	@ (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019c2:	699a      	ldr	r2, [r3, #24]
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019c6:	2101      	movs	r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	619a      	str	r2, [r3, #24]
 80019cc:	4b4e      	ldr	r3, [pc, #312]	@ (8001b08 <HAL_GPIO_Init+0x2bc>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2201      	movs	r2, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d8:	4a4c      	ldr	r2, [pc, #304]	@ (8001b0c <HAL_GPIO_Init+0x2c0>)
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	589b      	ldr	r3, [r3, r2]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2203      	movs	r2, #3
 80019ea:	4013      	ands	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	43da      	mvns	r2, r3
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4013      	ands	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	2390      	movs	r3, #144	@ 0x90
 8001a00:	05db      	lsls	r3, r3, #23
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d00d      	beq.n	8001a22 <HAL_GPIO_Init+0x1d6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a41      	ldr	r2, [pc, #260]	@ (8001b10 <HAL_GPIO_Init+0x2c4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d007      	beq.n	8001a1e <HAL_GPIO_Init+0x1d2>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a40      	ldr	r2, [pc, #256]	@ (8001b14 <HAL_GPIO_Init+0x2c8>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_GPIO_Init+0x1ce>
 8001a16:	2302      	movs	r3, #2
 8001a18:	e004      	b.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a1a:	2305      	movs	r3, #5
 8001a1c:	e002      	b.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_Init+0x1d8>
 8001a22:	2300      	movs	r3, #0
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	2103      	movs	r1, #3
 8001a28:	400a      	ands	r2, r1
 8001a2a:	0092      	lsls	r2, r2, #2
 8001a2c:	4093      	lsls	r3, r2
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a34:	4935      	ldr	r1, [pc, #212]	@ (8001b0c <HAL_GPIO_Init+0x2c0>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a42:	4b35      	ldr	r3, [pc, #212]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	43da      	mvns	r2, r3
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	4013      	ands	r3, r2
 8001a50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	035b      	lsls	r3, r3, #13
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4313      	orrs	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a66:	4b2c      	ldr	r3, [pc, #176]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	2380      	movs	r3, #128	@ 0x80
 8001a82:	039b      	lsls	r3, r3, #14
 8001a84:	4013      	ands	r3, r2
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001a88:	693a      	ldr	r2, [r7, #16]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a90:	4b21      	ldr	r3, [pc, #132]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a96:	4b20      	ldr	r3, [pc, #128]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	43da      	mvns	r2, r3
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	2380      	movs	r3, #128	@ 0x80
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001ac0:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43da      	mvns	r2, r3
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <HAL_GPIO_Init+0x2cc>)
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	3301      	adds	r3, #1
 8001aee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	40da      	lsrs	r2, r3
 8001af8:	1e13      	subs	r3, r2, #0
 8001afa:	d000      	beq.n	8001afe <HAL_GPIO_Init+0x2b2>
 8001afc:	e6ae      	b.n	800185c <HAL_GPIO_Init+0x10>
  } 
}
 8001afe:	46c0      	nop			@ (mov r8, r8)
 8001b00:	46c0      	nop			@ (mov r8, r8)
 8001b02:	46bd      	mov	sp, r7
 8001b04:	b006      	add	sp, #24
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010000 	.word	0x40010000
 8001b10:	48000400 	.word	0x48000400
 8001b14:	48000800 	.word	0x48000800
 8001b18:	40010400 	.word	0x40010400

08001b1c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	000a      	movs	r2, r1
 8001b26:	1cbb      	adds	r3, r7, #2
 8001b28:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	1cba      	adds	r2, r7, #2
 8001b30:	8812      	ldrh	r2, [r2, #0]
 8001b32:	4013      	ands	r3, r2
 8001b34:	d004      	beq.n	8001b40 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001b36:	230f      	movs	r3, #15
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	e003      	b.n	8001b48 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b40:	230f      	movs	r3, #15
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001b48:	230f      	movs	r3, #15
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	781b      	ldrb	r3, [r3, #0]
  }
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	0008      	movs	r0, r1
 8001b60:	0011      	movs	r1, r2
 8001b62:	1cbb      	adds	r3, r7, #2
 8001b64:	1c02      	adds	r2, r0, #0
 8001b66:	801a      	strh	r2, [r3, #0]
 8001b68:	1c7b      	adds	r3, r7, #1
 8001b6a:	1c0a      	adds	r2, r1, #0
 8001b6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6e:	1c7b      	adds	r3, r7, #1
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d004      	beq.n	8001b80 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b76:	1cbb      	adds	r3, r7, #2
 8001b78:	881a      	ldrh	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b7e:	e003      	b.n	8001b88 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b80:	1cbb      	adds	r3, r7, #2
 8001b82:	881a      	ldrh	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001b88:	46c0      	nop			@ (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b002      	add	sp, #8
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	0002      	movs	r2, r0
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b9c:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	1dba      	adds	r2, r7, #6
 8001ba2:	8812      	ldrh	r2, [r2, #0]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d008      	beq.n	8001bba <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	@ (8001bc4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001baa:	1dba      	adds	r2, r7, #6
 8001bac:	8812      	ldrh	r2, [r2, #0]
 8001bae:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb0:	1dbb      	adds	r3, r7, #6
 8001bb2:	881b      	ldrh	r3, [r3, #0]
 8001bb4:	0018      	movs	r0, r3
 8001bb6:	f7fe ffa9 	bl	8000b0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001bba:	46c0      	nop			@ (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b002      	add	sp, #8
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	46c0      	nop			@ (mov r8, r8)
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b088      	sub	sp, #32
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e301      	b.n	80021de <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2201      	movs	r2, #1
 8001be0:	4013      	ands	r3, r2
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x1e>
 8001be4:	e08d      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001be6:	4bc3      	ldr	r3, [pc, #780]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	220c      	movs	r2, #12
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d00e      	beq.n	8001c10 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bf2:	4bc0      	ldr	r3, [pc, #768]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d116      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64>
 8001bfe:	4bbd      	ldr	r3, [pc, #756]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	2380      	movs	r3, #128	@ 0x80
 8001c04:	025b      	lsls	r3, r3, #9
 8001c06:	401a      	ands	r2, r3
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	025b      	lsls	r3, r3, #9
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d10d      	bne.n	8001c2c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4bb8      	ldr	r3, [pc, #736]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	029b      	lsls	r3, r3, #10
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d100      	bne.n	8001c1e <HAL_RCC_OscConfig+0x56>
 8001c1c:	e070      	b.n	8001d00 <HAL_RCC_OscConfig+0x138>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d000      	beq.n	8001c28 <HAL_RCC_OscConfig+0x60>
 8001c26:	e06b      	b.n	8001d00 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e2d8      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x7c>
 8001c34:	4baf      	ldr	r3, [pc, #700]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4bae      	ldr	r3, [pc, #696]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	2180      	movs	r1, #128	@ 0x80
 8001c3c:	0249      	lsls	r1, r1, #9
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e02f      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_OscConfig+0x9e>
 8001c4c:	4ba9      	ldr	r3, [pc, #676]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4ba8      	ldr	r3, [pc, #672]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c52:	49a9      	ldr	r1, [pc, #676]	@ (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	4ba6      	ldr	r3, [pc, #664]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	4ba5      	ldr	r3, [pc, #660]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	49a7      	ldr	r1, [pc, #668]	@ (8001efc <HAL_RCC_OscConfig+0x334>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	e01e      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d10e      	bne.n	8001c8c <HAL_RCC_OscConfig+0xc4>
 8001c6e:	4ba1      	ldr	r3, [pc, #644]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4ba0      	ldr	r3, [pc, #640]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	02c9      	lsls	r1, r1, #11
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	4b9d      	ldr	r3, [pc, #628]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b9c      	ldr	r3, [pc, #624]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c82:	2180      	movs	r1, #128	@ 0x80
 8001c84:	0249      	lsls	r1, r1, #9
 8001c86:	430a      	orrs	r2, r1
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001c8c:	4b99      	ldr	r3, [pc, #612]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b98      	ldr	r3, [pc, #608]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c92:	4999      	ldr	r1, [pc, #612]	@ (8001ef8 <HAL_RCC_OscConfig+0x330>)
 8001c94:	400a      	ands	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4b96      	ldr	r3, [pc, #600]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4b95      	ldr	r3, [pc, #596]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	4997      	ldr	r1, [pc, #604]	@ (8001efc <HAL_RCC_OscConfig+0x334>)
 8001ca0:	400a      	ands	r2, r1
 8001ca2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d014      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff fcc2 	bl	8001634 <HAL_GetTick>
 8001cb0:	0003      	movs	r3, r0
 8001cb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cb6:	f7ff fcbd 	bl	8001634 <HAL_GetTick>
 8001cba:	0002      	movs	r2, r0
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b64      	cmp	r3, #100	@ 0x64
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e28a      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	2380      	movs	r3, #128	@ 0x80
 8001cce:	029b      	lsls	r3, r3, #10
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0xee>
 8001cd4:	e015      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd6:	f7ff fcad 	bl	8001634 <HAL_GetTick>
 8001cda:	0003      	movs	r3, r0
 8001cdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce0:	f7ff fca8 	bl	8001634 <HAL_GetTick>
 8001ce4:	0002      	movs	r2, r0
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b64      	cmp	r3, #100	@ 0x64
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e275      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf2:	4b80      	ldr	r3, [pc, #512]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	@ 0x80
 8001cf8:	029b      	lsls	r3, r3, #10
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x118>
 8001cfe:	e000      	b.n	8001d02 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d00:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2202      	movs	r2, #2
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d100      	bne.n	8001d0e <HAL_RCC_OscConfig+0x146>
 8001d0c:	e069      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d0e:	4b79      	ldr	r3, [pc, #484]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	220c      	movs	r2, #12
 8001d14:	4013      	ands	r3, r2
 8001d16:	d00b      	beq.n	8001d30 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d18:	4b76      	ldr	r3, [pc, #472]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	220c      	movs	r2, #12
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b08      	cmp	r3, #8
 8001d22:	d11c      	bne.n	8001d5e <HAL_RCC_OscConfig+0x196>
 8001d24:	4b73      	ldr	r3, [pc, #460]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	2380      	movs	r3, #128	@ 0x80
 8001d2a:	025b      	lsls	r3, r3, #9
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	d116      	bne.n	8001d5e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d30:	4b70      	ldr	r3, [pc, #448]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2202      	movs	r2, #2
 8001d36:	4013      	ands	r3, r2
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e24b      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b6b      	ldr	r3, [pc, #428]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	22f8      	movs	r2, #248	@ 0xf8
 8001d4c:	4393      	bics	r3, r2
 8001d4e:	0019      	movs	r1, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	00da      	lsls	r2, r3, #3
 8001d56:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5c:	e041      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d024      	beq.n	8001db0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d66:	4b63      	ldr	r3, [pc, #396]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	4b62      	ldr	r3, [pc, #392]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fc5f 	bl	8001634 <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fc5a 	bl	8001634 <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e227      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8e:	4b59      	ldr	r3, [pc, #356]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d0f1      	beq.n	8001d7c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b56      	ldr	r3, [pc, #344]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	22f8      	movs	r2, #248	@ 0xf8
 8001d9e:	4393      	bics	r3, r2
 8001da0:	0019      	movs	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00da      	lsls	r2, r3, #3
 8001da8:	4b52      	ldr	r3, [pc, #328]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001daa:	430a      	orrs	r2, r1
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	e018      	b.n	8001de2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db0:	4b50      	ldr	r3, [pc, #320]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	438a      	bics	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fc3a 	bl	8001634 <HAL_GetTick>
 8001dc0:	0003      	movs	r3, r0
 8001dc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fc35 	bl	8001634 <HAL_GetTick>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e202      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dd8:	4b46      	ldr	r3, [pc, #280]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2202      	movs	r2, #2
 8001dde:	4013      	ands	r3, r2
 8001de0:	d1f1      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2208      	movs	r2, #8
 8001de8:	4013      	ands	r3, r2
 8001dea:	d036      	beq.n	8001e5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d019      	beq.n	8001e28 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df4:	4b3f      	ldr	r3, [pc, #252]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001df6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001df8:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7ff fc18 	bl	8001634 <HAL_GetTick>
 8001e04:	0003      	movs	r3, r0
 8001e06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fc13 	bl	8001634 <HAL_GetTick>
 8001e0e:	0002      	movs	r2, r0
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e1e0      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e1c:	4b35      	ldr	r3, [pc, #212]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e20:	2202      	movs	r2, #2
 8001e22:	4013      	ands	r3, r2
 8001e24:	d0f1      	beq.n	8001e0a <HAL_RCC_OscConfig+0x242>
 8001e26:	e018      	b.n	8001e5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e28:	4b32      	ldr	r3, [pc, #200]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e2c:	4b31      	ldr	r3, [pc, #196]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e2e:	2101      	movs	r1, #1
 8001e30:	438a      	bics	r2, r1
 8001e32:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fbfe 	bl	8001634 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e3e:	f7ff fbf9 	bl	8001634 <HAL_GetTick>
 8001e42:	0002      	movs	r2, r0
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e1c6      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e54:	2202      	movs	r2, #2
 8001e56:	4013      	ands	r3, r2
 8001e58:	d1f1      	bne.n	8001e3e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2204      	movs	r2, #4
 8001e60:	4013      	ands	r3, r2
 8001e62:	d100      	bne.n	8001e66 <HAL_RCC_OscConfig+0x29e>
 8001e64:	e0b4      	b.n	8001fd0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e66:	201f      	movs	r0, #31
 8001e68:	183b      	adds	r3, r7, r0
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b21      	ldr	r3, [pc, #132]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e70:	69da      	ldr	r2, [r3, #28]
 8001e72:	2380      	movs	r3, #128	@ 0x80
 8001e74:	055b      	lsls	r3, r3, #21
 8001e76:	4013      	ands	r3, r2
 8001e78:	d110      	bne.n	8001e9c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e7c:	69da      	ldr	r2, [r3, #28]
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e80:	2180      	movs	r1, #128	@ 0x80
 8001e82:	0549      	lsls	r1, r1, #21
 8001e84:	430a      	orrs	r2, r1
 8001e86:	61da      	str	r2, [r3, #28]
 8001e88:	4b1a      	ldr	r3, [pc, #104]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	69da      	ldr	r2, [r3, #28]
 8001e8c:	2380      	movs	r3, #128	@ 0x80
 8001e8e:	055b      	lsls	r3, r3, #21
 8001e90:	4013      	ands	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
 8001e94:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e96:	183b      	adds	r3, r7, r0
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9c:	4b18      	ldr	r3, [pc, #96]	@ (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d11a      	bne.n	8001ede <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea8:	4b15      	ldr	r3, [pc, #84]	@ (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b14      	ldr	r3, [pc, #80]	@ (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001eae:	2180      	movs	r1, #128	@ 0x80
 8001eb0:	0049      	lsls	r1, r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbbd 	bl	8001634 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec0:	f7ff fbb8 	bl	8001634 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b64      	cmp	r3, #100	@ 0x64
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e185      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8001f00 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	@ 0x80
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10e      	bne.n	8001f04 <HAL_RCC_OscConfig+0x33c>
 8001ee6:	4b03      	ldr	r3, [pc, #12]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	6a1a      	ldr	r2, [r3, #32]
 8001eea:	4b02      	ldr	r3, [pc, #8]	@ (8001ef4 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	621a      	str	r2, [r3, #32]
 8001ef2:	e035      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	fffeffff 	.word	0xfffeffff
 8001efc:	fffbffff 	.word	0xfffbffff
 8001f00:	40007000 	.word	0x40007000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10c      	bne.n	8001f26 <HAL_RCC_OscConfig+0x35e>
 8001f0c:	4bb6      	ldr	r3, [pc, #728]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f0e:	6a1a      	ldr	r2, [r3, #32]
 8001f10:	4bb5      	ldr	r3, [pc, #724]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	621a      	str	r2, [r3, #32]
 8001f18:	4bb3      	ldr	r3, [pc, #716]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f1a:	6a1a      	ldr	r2, [r3, #32]
 8001f1c:	4bb2      	ldr	r3, [pc, #712]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f1e:	2104      	movs	r1, #4
 8001f20:	438a      	bics	r2, r1
 8001f22:	621a      	str	r2, [r3, #32]
 8001f24:	e01c      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x380>
 8001f2e:	4bae      	ldr	r3, [pc, #696]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f30:	6a1a      	ldr	r2, [r3, #32]
 8001f32:	4bad      	ldr	r3, [pc, #692]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f34:	2104      	movs	r1, #4
 8001f36:	430a      	orrs	r2, r1
 8001f38:	621a      	str	r2, [r3, #32]
 8001f3a:	4bab      	ldr	r3, [pc, #684]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f3c:	6a1a      	ldr	r2, [r3, #32]
 8001f3e:	4baa      	ldr	r3, [pc, #680]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	430a      	orrs	r2, r1
 8001f44:	621a      	str	r2, [r3, #32]
 8001f46:	e00b      	b.n	8001f60 <HAL_RCC_OscConfig+0x398>
 8001f48:	4ba7      	ldr	r3, [pc, #668]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f4a:	6a1a      	ldr	r2, [r3, #32]
 8001f4c:	4ba6      	ldr	r3, [pc, #664]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	621a      	str	r2, [r3, #32]
 8001f54:	4ba4      	ldr	r3, [pc, #656]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f56:	6a1a      	ldr	r2, [r3, #32]
 8001f58:	4ba3      	ldr	r3, [pc, #652]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f5a:	2104      	movs	r1, #4
 8001f5c:	438a      	bics	r2, r1
 8001f5e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f68:	f7ff fb64 	bl	8001634 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f7ff fb5f 	bl	8001634 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a9b      	ldr	r2, [pc, #620]	@ (80021ec <HAL_RCC_OscConfig+0x624>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e12b      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f86:	4b98      	ldr	r3, [pc, #608]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
 8001f90:	e013      	b.n	8001fba <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7ff fb4f 	bl	8001634 <HAL_GetTick>
 8001f96:	0003      	movs	r3, r0
 8001f98:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f9a:	e009      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fb4a 	bl	8001634 <HAL_GetTick>
 8001fa0:	0002      	movs	r2, r0
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	4a91      	ldr	r2, [pc, #580]	@ (80021ec <HAL_RCC_OscConfig+0x624>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e116      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	4b8d      	ldr	r3, [pc, #564]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fb2:	6a1b      	ldr	r3, [r3, #32]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fba:	231f      	movs	r3, #31
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc4:	4b88      	ldr	r3, [pc, #544]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	69da      	ldr	r2, [r3, #28]
 8001fc8:	4b87      	ldr	r3, [pc, #540]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fca:	4989      	ldr	r1, [pc, #548]	@ (80021f0 <HAL_RCC_OscConfig+0x628>)
 8001fcc:	400a      	ands	r2, r1
 8001fce:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d063      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d12a      	bne.n	8002038 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001fe2:	4b81      	ldr	r3, [pc, #516]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fe4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fe6:	4b80      	ldr	r3, [pc, #512]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001fe8:	2104      	movs	r1, #4
 8001fea:	430a      	orrs	r2, r1
 8001fec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001fee:	4b7e      	ldr	r3, [pc, #504]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001ff2:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fb1b 	bl	8001634 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002004:	f7ff fb16 	bl	8001634 <HAL_GetTick>
 8002008:	0002      	movs	r2, r0
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e0e3      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002016:	4b74      	ldr	r3, [pc, #464]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002018:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201a:	2202      	movs	r2, #2
 800201c:	4013      	ands	r3, r2
 800201e:	d0f1      	beq.n	8002004 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002020:	4b71      	ldr	r3, [pc, #452]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002022:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002024:	22f8      	movs	r2, #248	@ 0xf8
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	4b6d      	ldr	r3, [pc, #436]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002032:	430a      	orrs	r2, r1
 8002034:	635a      	str	r2, [r3, #52]	@ 0x34
 8002036:	e034      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	695b      	ldr	r3, [r3, #20]
 800203c:	3305      	adds	r3, #5
 800203e:	d111      	bne.n	8002064 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002040:	4b69      	ldr	r3, [pc, #420]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002044:	4b68      	ldr	r3, [pc, #416]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002046:	2104      	movs	r1, #4
 8002048:	438a      	bics	r2, r1
 800204a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800204e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002050:	22f8      	movs	r2, #248	@ 0xf8
 8002052:	4393      	bics	r3, r2
 8002054:	0019      	movs	r1, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	00da      	lsls	r2, r3, #3
 800205c:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800205e:	430a      	orrs	r2, r1
 8002060:	635a      	str	r2, [r3, #52]	@ 0x34
 8002062:	e01e      	b.n	80020a2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002064:	4b60      	ldr	r3, [pc, #384]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002066:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002068:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800206a:	2104      	movs	r1, #4
 800206c:	430a      	orrs	r2, r1
 800206e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002070:	4b5d      	ldr	r3, [pc, #372]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002074:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002076:	2101      	movs	r1, #1
 8002078:	438a      	bics	r2, r1
 800207a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207c:	f7ff fada 	bl	8001634 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002086:	f7ff fad5 	bl	8001634 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0a2      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002098:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800209a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f1      	bne.n	8002086 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <HAL_RCC_OscConfig+0x4e4>
 80020aa:	e097      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ac:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	220c      	movs	r2, #12
 80020b2:	4013      	ands	r3, r2
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d100      	bne.n	80020ba <HAL_RCC_OscConfig+0x4f2>
 80020b8:	e06b      	b.n	8002192 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d14c      	bne.n	800215c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	4b48      	ldr	r3, [pc, #288]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020c8:	494a      	ldr	r1, [pc, #296]	@ (80021f4 <HAL_RCC_OscConfig+0x62c>)
 80020ca:	400a      	ands	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ce:	f7ff fab1 	bl	8001634 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d8:	f7ff faac 	bl	8001634 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b02      	cmp	r3, #2
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e079      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ea:	4b3f      	ldr	r3, [pc, #252]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	@ 0x80
 80020f0:	049b      	lsls	r3, r3, #18
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020f6:	4b3c      	ldr	r3, [pc, #240]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	220f      	movs	r2, #15
 80020fc:	4393      	bics	r3, r2
 80020fe:	0019      	movs	r1, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002104:	4b38      	ldr	r3, [pc, #224]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
 800210a:	4b37      	ldr	r3, [pc, #220]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a3a      	ldr	r2, [pc, #232]	@ (80021f8 <HAL_RCC_OscConfig+0x630>)
 8002110:	4013      	ands	r3, r2
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800211c:	431a      	orrs	r2, r3
 800211e:	4b32      	ldr	r3, [pc, #200]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002120:	430a      	orrs	r2, r1
 8002122:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002124:	4b30      	ldr	r3, [pc, #192]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	4b2f      	ldr	r3, [pc, #188]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800212a:	2180      	movs	r1, #128	@ 0x80
 800212c:	0449      	lsls	r1, r1, #17
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff fa7f 	bl	8001634 <HAL_GetTick>
 8002136:	0003      	movs	r3, r0
 8002138:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fa7a 	bl	8001634 <HAL_GetTick>
 8002140:	0002      	movs	r2, r0
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e047      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800214e:	4b26      	ldr	r3, [pc, #152]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	2380      	movs	r3, #128	@ 0x80
 8002154:	049b      	lsls	r3, r3, #18
 8002156:	4013      	ands	r3, r2
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x574>
 800215a:	e03f      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215c:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b21      	ldr	r3, [pc, #132]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002162:	4924      	ldr	r1, [pc, #144]	@ (80021f4 <HAL_RCC_OscConfig+0x62c>)
 8002164:	400a      	ands	r2, r1
 8002166:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002168:	f7ff fa64 	bl	8001634 <HAL_GetTick>
 800216c:	0003      	movs	r3, r0
 800216e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002170:	e008      	b.n	8002184 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002172:	f7ff fa5f 	bl	8001634 <HAL_GetTick>
 8002176:	0002      	movs	r2, r0
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d901      	bls.n	8002184 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e02c      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002184:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2380      	movs	r3, #128	@ 0x80
 800218a:	049b      	lsls	r3, r3, #18
 800218c:	4013      	ands	r3, r2
 800218e:	d1f0      	bne.n	8002172 <HAL_RCC_OscConfig+0x5aa>
 8002190:	e024      	b.n	80021dc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e01f      	b.n	80021de <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800219e:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80021a4:	4b10      	ldr	r3, [pc, #64]	@ (80021e8 <HAL_RCC_OscConfig+0x620>)
 80021a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	025b      	lsls	r3, r3, #9
 80021b0:	401a      	ands	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d10e      	bne.n	80021d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	220f      	movs	r2, #15
 80021be:	401a      	ands	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	23f0      	movs	r3, #240	@ 0xf0
 80021cc:	039b      	lsls	r3, r3, #14
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	0018      	movs	r0, r3
 80021e0:	46bd      	mov	sp, r7
 80021e2:	b008      	add	sp, #32
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	40021000 	.word	0x40021000
 80021ec:	00001388 	.word	0x00001388
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	feffffff 	.word	0xfeffffff
 80021f8:	ffc2ffff 	.word	0xffc2ffff

080021fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d101      	bne.n	8002210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b3      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4b5b      	ldr	r3, [pc, #364]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2201      	movs	r2, #1
 8002216:	4013      	ands	r3, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d911      	bls.n	8002242 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221e:	4b58      	ldr	r3, [pc, #352]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2201      	movs	r2, #1
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	4b55      	ldr	r3, [pc, #340]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	430a      	orrs	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002230:	4b53      	ldr	r3, [pc, #332]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e09a      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2202      	movs	r2, #2
 8002248:	4013      	ands	r3, r2
 800224a:	d015      	beq.n	8002278 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2204      	movs	r2, #4
 8002252:	4013      	ands	r3, r2
 8002254:	d006      	beq.n	8002264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002256:	4b4b      	ldr	r3, [pc, #300]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4b4a      	ldr	r3, [pc, #296]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 800225c:	21e0      	movs	r1, #224	@ 0xe0
 800225e:	00c9      	lsls	r1, r1, #3
 8002260:	430a      	orrs	r2, r1
 8002262:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b47      	ldr	r3, [pc, #284]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	22f0      	movs	r2, #240	@ 0xf0
 800226a:	4393      	bics	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689a      	ldr	r2, [r3, #8]
 8002272:	4b44      	ldr	r3, [pc, #272]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002274:	430a      	orrs	r2, r1
 8002276:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2201      	movs	r2, #1
 800227e:	4013      	ands	r3, r2
 8002280:	d040      	beq.n	8002304 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b3e      	ldr	r3, [pc, #248]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	2380      	movs	r3, #128	@ 0x80
 8002290:	029b      	lsls	r3, r3, #10
 8002292:	4013      	ands	r3, r2
 8002294:	d114      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06e      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d107      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a2:	4b38      	ldr	r3, [pc, #224]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	@ 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d108      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e062      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b2:	4b34      	ldr	r3, [pc, #208]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2202      	movs	r2, #2
 80022b8:	4013      	ands	r3, r2
 80022ba:	d101      	bne.n	80022c0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e05b      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c0:	4b30      	ldr	r3, [pc, #192]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	2203      	movs	r2, #3
 80022c6:	4393      	bics	r3, r2
 80022c8:	0019      	movs	r1, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d4:	f7ff f9ae 	bl	8001634 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7ff f9a9 	bl	8001634 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a27      	ldr	r2, [pc, #156]	@ (8002388 <HAL_RCC_ClockConfig+0x18c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e042      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b24      	ldr	r3, [pc, #144]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	220c      	movs	r2, #12
 80022f8:	401a      	ands	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1ec      	bne.n	80022de <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002304:	4b1e      	ldr	r3, [pc, #120]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2201      	movs	r2, #1
 800230a:	4013      	ands	r3, r2
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	d211      	bcs.n	8002336 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	4b1b      	ldr	r3, [pc, #108]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	4393      	bics	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	4b18      	ldr	r3, [pc, #96]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	430a      	orrs	r2, r1
 8002322:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002324:	4b16      	ldr	r3, [pc, #88]	@ (8002380 <HAL_RCC_ClockConfig+0x184>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2201      	movs	r2, #1
 800232a:	4013      	ands	r3, r2
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e020      	b.n	8002378 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2204      	movs	r2, #4
 800233c:	4013      	ands	r3, r2
 800233e:	d009      	beq.n	8002354 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b10      	ldr	r3, [pc, #64]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	4a11      	ldr	r2, [pc, #68]	@ (800238c <HAL_RCC_ClockConfig+0x190>)
 8002346:	4013      	ands	r3, r2
 8002348:	0019      	movs	r1, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 8002350:	430a      	orrs	r2, r1
 8002352:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002354:	f000 f820 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002358:	0001      	movs	r1, r0
 800235a:	4b0a      	ldr	r3, [pc, #40]	@ (8002384 <HAL_RCC_ClockConfig+0x188>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	091b      	lsrs	r3, r3, #4
 8002360:	220f      	movs	r2, #15
 8002362:	4013      	ands	r3, r2
 8002364:	4a0a      	ldr	r2, [pc, #40]	@ (8002390 <HAL_RCC_ClockConfig+0x194>)
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	000a      	movs	r2, r1
 800236a:	40da      	lsrs	r2, r3
 800236c:	4b09      	ldr	r3, [pc, #36]	@ (8002394 <HAL_RCC_ClockConfig+0x198>)
 800236e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002370:	2003      	movs	r0, #3
 8002372:	f7ff f919 	bl	80015a8 <HAL_InitTick>
  
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	0018      	movs	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	b004      	add	sp, #16
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	00001388 	.word	0x00001388
 800238c:	fffff8ff 	.word	0xfffff8ff
 8002390:	08003780 	.word	0x08003780
 8002394:	20000024 	.word	0x20000024

08002398 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b086      	sub	sp, #24
 800239c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800239e:	2300      	movs	r3, #0
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	2300      	movs	r3, #0
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80023b2:	4b20      	ldr	r3, [pc, #128]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	220c      	movs	r2, #12
 80023bc:	4013      	ands	r3, r2
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d002      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x30>
 80023c2:	2b08      	cmp	r3, #8
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x36>
 80023c6:	e02c      	b.n	8002422 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80023c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023ca:	613b      	str	r3, [r7, #16]
      break;
 80023cc:	e02c      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	0c9b      	lsrs	r3, r3, #18
 80023d2:	220f      	movs	r2, #15
 80023d4:	4013      	ands	r3, r2
 80023d6:	4a19      	ldr	r2, [pc, #100]	@ (800243c <HAL_RCC_GetSysClockFreq+0xa4>)
 80023d8:	5cd3      	ldrb	r3, [r2, r3]
 80023da:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80023dc:	4b15      	ldr	r3, [pc, #84]	@ (8002434 <HAL_RCC_GetSysClockFreq+0x9c>)
 80023de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023e0:	220f      	movs	r2, #15
 80023e2:	4013      	ands	r3, r2
 80023e4:	4a16      	ldr	r2, [pc, #88]	@ (8002440 <HAL_RCC_GetSysClockFreq+0xa8>)
 80023e6:	5cd3      	ldrb	r3, [r2, r3]
 80023e8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	2380      	movs	r3, #128	@ 0x80
 80023ee:	025b      	lsls	r3, r3, #9
 80023f0:	4013      	ands	r3, r2
 80023f2:	d009      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80023f4:	68b9      	ldr	r1, [r7, #8]
 80023f6:	4810      	ldr	r0, [pc, #64]	@ (8002438 <HAL_RCC_GetSysClockFreq+0xa0>)
 80023f8:	f7fd fe86 	bl	8000108 <__udivsi3>
 80023fc:	0003      	movs	r3, r0
 80023fe:	001a      	movs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4353      	muls	r3, r2
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e009      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	000a      	movs	r2, r1
 800240c:	0152      	lsls	r2, r2, #5
 800240e:	1a52      	subs	r2, r2, r1
 8002410:	0193      	lsls	r3, r2, #6
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	185b      	adds	r3, r3, r1
 8002418:	021b      	lsls	r3, r3, #8
 800241a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
      break;
 8002420:	e002      	b.n	8002428 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002422:	4b05      	ldr	r3, [pc, #20]	@ (8002438 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002424:	613b      	str	r3, [r7, #16]
      break;
 8002426:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002428:	693b      	ldr	r3, [r7, #16]
}
 800242a:	0018      	movs	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	b006      	add	sp, #24
 8002430:	bd80      	pop	{r7, pc}
 8002432:	46c0      	nop			@ (mov r8, r8)
 8002434:	40021000 	.word	0x40021000
 8002438:	007a1200 	.word	0x007a1200
 800243c:	08003790 	.word	0x08003790
 8002440:	080037a0 	.word	0x080037a0

08002444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e042      	b.n	80024dc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	223d      	movs	r2, #61	@ 0x3d
 800245a:	5c9b      	ldrb	r3, [r3, r2]
 800245c:	b2db      	uxtb	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	223c      	movs	r2, #60	@ 0x3c
 8002466:	2100      	movs	r1, #0
 8002468:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f7fe ffff 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	223d      	movs	r2, #61	@ 0x3d
 8002476:	2102      	movs	r1, #2
 8002478:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	3304      	adds	r3, #4
 8002482:	0019      	movs	r1, r3
 8002484:	0010      	movs	r0, r2
 8002486:	f000 fd35 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2246      	movs	r2, #70	@ 0x46
 800248e:	2101      	movs	r1, #1
 8002490:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	223e      	movs	r2, #62	@ 0x3e
 8002496:	2101      	movs	r1, #1
 8002498:	5499      	strb	r1, [r3, r2]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	223f      	movs	r2, #63	@ 0x3f
 800249e:	2101      	movs	r1, #1
 80024a0:	5499      	strb	r1, [r3, r2]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2240      	movs	r2, #64	@ 0x40
 80024a6:	2101      	movs	r1, #1
 80024a8:	5499      	strb	r1, [r3, r2]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2241      	movs	r2, #65	@ 0x41
 80024ae:	2101      	movs	r1, #1
 80024b0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2242      	movs	r2, #66	@ 0x42
 80024b6:	2101      	movs	r1, #1
 80024b8:	5499      	strb	r1, [r3, r2]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2243      	movs	r2, #67	@ 0x43
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2244      	movs	r2, #68	@ 0x44
 80024c6:	2101      	movs	r1, #1
 80024c8:	5499      	strb	r1, [r3, r2]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2245      	movs	r2, #69	@ 0x45
 80024ce:	2101      	movs	r1, #1
 80024d0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	223d      	movs	r2, #61	@ 0x3d
 80024d6:	2101      	movs	r1, #1
 80024d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	0018      	movs	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	b002      	add	sp, #8
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e042      	b.n	800257c <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	223d      	movs	r2, #61	@ 0x3d
 80024fa:	5c9b      	ldrb	r3, [r3, r2]
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d107      	bne.n	8002512 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	223c      	movs	r2, #60	@ 0x3c
 8002506:	2100      	movs	r1, #0
 8002508:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	0018      	movs	r0, r3
 800250e:	f000 f839 	bl	8002584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	223d      	movs	r2, #61	@ 0x3d
 8002516:	2102      	movs	r1, #2
 8002518:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3304      	adds	r3, #4
 8002522:	0019      	movs	r1, r3
 8002524:	0010      	movs	r0, r2
 8002526:	f000 fce5 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2246      	movs	r2, #70	@ 0x46
 800252e:	2101      	movs	r1, #1
 8002530:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	223e      	movs	r2, #62	@ 0x3e
 8002536:	2101      	movs	r1, #1
 8002538:	5499      	strb	r1, [r3, r2]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	223f      	movs	r2, #63	@ 0x3f
 800253e:	2101      	movs	r1, #1
 8002540:	5499      	strb	r1, [r3, r2]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2240      	movs	r2, #64	@ 0x40
 8002546:	2101      	movs	r1, #1
 8002548:	5499      	strb	r1, [r3, r2]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2241      	movs	r2, #65	@ 0x41
 800254e:	2101      	movs	r1, #1
 8002550:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2242      	movs	r2, #66	@ 0x42
 8002556:	2101      	movs	r1, #1
 8002558:	5499      	strb	r1, [r3, r2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2243      	movs	r2, #67	@ 0x43
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2244      	movs	r2, #68	@ 0x44
 8002566:	2101      	movs	r1, #1
 8002568:	5499      	strb	r1, [r3, r2]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2245      	movs	r2, #69	@ 0x45
 800256e:	2101      	movs	r1, #1
 8002570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	223d      	movs	r2, #61	@ 0x3d
 8002576:	2101      	movs	r1, #1
 8002578:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b002      	add	sp, #8
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800258c:	46c0      	nop			@ (mov r8, r8)
 800258e:	46bd      	mov	sp, r7
 8002590:	b002      	add	sp, #8
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d108      	bne.n	80025b6 <HAL_TIM_PWM_Start+0x22>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	223e      	movs	r2, #62	@ 0x3e
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	3b01      	subs	r3, #1
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	4193      	sbcs	r3, r2
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	e01f      	b.n	80025f6 <HAL_TIM_PWM_Start+0x62>
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d108      	bne.n	80025ce <HAL_TIM_PWM_Start+0x3a>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	223f      	movs	r2, #63	@ 0x3f
 80025c0:	5c9b      	ldrb	r3, [r3, r2]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	1e5a      	subs	r2, r3, #1
 80025c8:	4193      	sbcs	r3, r2
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	e013      	b.n	80025f6 <HAL_TIM_PWM_Start+0x62>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d108      	bne.n	80025e6 <HAL_TIM_PWM_Start+0x52>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2240      	movs	r2, #64	@ 0x40
 80025d8:	5c9b      	ldrb	r3, [r3, r2]
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	1e5a      	subs	r2, r3, #1
 80025e0:	4193      	sbcs	r3, r2
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	e007      	b.n	80025f6 <HAL_TIM_PWM_Start+0x62>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2241      	movs	r2, #65	@ 0x41
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	1e5a      	subs	r2, r3, #1
 80025f2:	4193      	sbcs	r3, r2
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06a      	b.n	80026d4 <HAL_TIM_PWM_Start+0x140>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <HAL_TIM_PWM_Start+0x7a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	223e      	movs	r2, #62	@ 0x3e
 8002608:	2102      	movs	r1, #2
 800260a:	5499      	strb	r1, [r3, r2]
 800260c:	e013      	b.n	8002636 <HAL_TIM_PWM_Start+0xa2>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d104      	bne.n	800261e <HAL_TIM_PWM_Start+0x8a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	223f      	movs	r2, #63	@ 0x3f
 8002618:	2102      	movs	r1, #2
 800261a:	5499      	strb	r1, [r3, r2]
 800261c:	e00b      	b.n	8002636 <HAL_TIM_PWM_Start+0xa2>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2b08      	cmp	r3, #8
 8002622:	d104      	bne.n	800262e <HAL_TIM_PWM_Start+0x9a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2240      	movs	r2, #64	@ 0x40
 8002628:	2102      	movs	r1, #2
 800262a:	5499      	strb	r1, [r3, r2]
 800262c:	e003      	b.n	8002636 <HAL_TIM_PWM_Start+0xa2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2241      	movs	r2, #65	@ 0x41
 8002632:	2102      	movs	r1, #2
 8002634:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	6839      	ldr	r1, [r7, #0]
 800263c:	2201      	movs	r2, #1
 800263e:	0018      	movs	r0, r3
 8002640:	f000 ffda 	bl	80035f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a24      	ldr	r2, [pc, #144]	@ (80026dc <HAL_TIM_PWM_Start+0x148>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_TIM_PWM_Start+0xce>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a23      	ldr	r2, [pc, #140]	@ (80026e0 <HAL_TIM_PWM_Start+0x14c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d004      	beq.n	8002662 <HAL_TIM_PWM_Start+0xce>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a21      	ldr	r2, [pc, #132]	@ (80026e4 <HAL_TIM_PWM_Start+0x150>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <HAL_TIM_PWM_Start+0xd2>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_TIM_PWM_Start+0xd4>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d008      	beq.n	800267e <HAL_TIM_PWM_Start+0xea>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2180      	movs	r1, #128	@ 0x80
 8002678:	0209      	lsls	r1, r1, #8
 800267a:	430a      	orrs	r2, r1
 800267c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <HAL_TIM_PWM_Start+0x148>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d00a      	beq.n	800269e <HAL_TIM_PWM_Start+0x10a>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	2380      	movs	r3, #128	@ 0x80
 800268e:	05db      	lsls	r3, r3, #23
 8002690:	429a      	cmp	r2, r3
 8002692:	d004      	beq.n	800269e <HAL_TIM_PWM_Start+0x10a>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a13      	ldr	r2, [pc, #76]	@ (80026e8 <HAL_TIM_PWM_Start+0x154>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d111      	bne.n	80026c2 <HAL_TIM_PWM_Start+0x12e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2207      	movs	r2, #7
 80026a6:	4013      	ands	r3, r2
 80026a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2b06      	cmp	r3, #6
 80026ae:	d010      	beq.n	80026d2 <HAL_TIM_PWM_Start+0x13e>
    {
      __HAL_TIM_ENABLE(htim);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2101      	movs	r1, #1
 80026bc:	430a      	orrs	r2, r1
 80026be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026c0:	e007      	b.n	80026d2 <HAL_TIM_PWM_Start+0x13e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b004      	add	sp, #16
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40012c00 	.word	0x40012c00
 80026e0:	40014400 	.word	0x40014400
 80026e4:	40014800 	.word	0x40014800
 80026e8:	40000400 	.word	0x40000400

080026ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e042      	b.n	8002784 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	223d      	movs	r2, #61	@ 0x3d
 8002702:	5c9b      	ldrb	r3, [r3, r2]
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	223c      	movs	r2, #60	@ 0x3c
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f7fe fe59 	bl	80013cc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	223d      	movs	r2, #61	@ 0x3d
 800271e:	2102      	movs	r1, #2
 8002720:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	0019      	movs	r1, r3
 800272c:	0010      	movs	r0, r2
 800272e:	f000 fbe1 	bl	8002ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2246      	movs	r2, #70	@ 0x46
 8002736:	2101      	movs	r1, #1
 8002738:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	223e      	movs	r2, #62	@ 0x3e
 800273e:	2101      	movs	r1, #1
 8002740:	5499      	strb	r1, [r3, r2]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	223f      	movs	r2, #63	@ 0x3f
 8002746:	2101      	movs	r1, #1
 8002748:	5499      	strb	r1, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2240      	movs	r2, #64	@ 0x40
 800274e:	2101      	movs	r1, #1
 8002750:	5499      	strb	r1, [r3, r2]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2241      	movs	r2, #65	@ 0x41
 8002756:	2101      	movs	r1, #1
 8002758:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2242      	movs	r2, #66	@ 0x42
 800275e:	2101      	movs	r1, #1
 8002760:	5499      	strb	r1, [r3, r2]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2243      	movs	r2, #67	@ 0x43
 8002766:	2101      	movs	r1, #1
 8002768:	5499      	strb	r1, [r3, r2]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2244      	movs	r2, #68	@ 0x44
 800276e:	2101      	movs	r1, #1
 8002770:	5499      	strb	r1, [r3, r2]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2245      	movs	r2, #69	@ 0x45
 8002776:	2101      	movs	r1, #1
 8002778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	223d      	movs	r2, #61	@ 0x3d
 800277e:	2101      	movs	r1, #1
 8002780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002782:	2300      	movs	r3, #0
}
 8002784:	0018      	movs	r0, r3
 8002786:	46bd      	mov	sp, r7
 8002788:	b002      	add	sp, #8
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	230f      	movs	r3, #15
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2200      	movs	r2, #0
 800279c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_IC_Start_IT+0x22>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	223e      	movs	r2, #62	@ 0x3e
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	e013      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x4a>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b04      	cmp	r3, #4
 80027b2:	d104      	bne.n	80027be <HAL_TIM_IC_Start_IT+0x32>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	223f      	movs	r2, #63	@ 0x3f
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	e00b      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x4a>
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d104      	bne.n	80027ce <HAL_TIM_IC_Start_IT+0x42>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2240      	movs	r2, #64	@ 0x40
 80027c8:	5c9b      	ldrb	r3, [r3, r2]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e003      	b.n	80027d6 <HAL_TIM_IC_Start_IT+0x4a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2241      	movs	r2, #65	@ 0x41
 80027d2:	5c9b      	ldrb	r3, [r3, r2]
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	220e      	movs	r2, #14
 80027d8:	18ba      	adds	r2, r7, r2
 80027da:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d104      	bne.n	80027ec <HAL_TIM_IC_Start_IT+0x60>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2242      	movs	r2, #66	@ 0x42
 80027e6:	5c9b      	ldrb	r3, [r3, r2]
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e013      	b.n	8002814 <HAL_TIM_IC_Start_IT+0x88>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d104      	bne.n	80027fc <HAL_TIM_IC_Start_IT+0x70>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2243      	movs	r2, #67	@ 0x43
 80027f6:	5c9b      	ldrb	r3, [r3, r2]
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	e00b      	b.n	8002814 <HAL_TIM_IC_Start_IT+0x88>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d104      	bne.n	800280c <HAL_TIM_IC_Start_IT+0x80>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2244      	movs	r2, #68	@ 0x44
 8002806:	5c9b      	ldrb	r3, [r3, r2]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	e003      	b.n	8002814 <HAL_TIM_IC_Start_IT+0x88>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2245      	movs	r2, #69	@ 0x45
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	210d      	movs	r1, #13
 8002816:	187a      	adds	r2, r7, r1
 8002818:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800281a:	230e      	movs	r3, #14
 800281c:	18fb      	adds	r3, r7, r3
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d103      	bne.n	800282c <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002824:	187b      	adds	r3, r7, r1
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d001      	beq.n	8002830 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0ac      	b.n	800298a <HAL_TIM_IC_Start_IT+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <HAL_TIM_IC_Start_IT+0xb4>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	223e      	movs	r2, #62	@ 0x3e
 800283a:	2102      	movs	r1, #2
 800283c:	5499      	strb	r1, [r3, r2]
 800283e:	e013      	b.n	8002868 <HAL_TIM_IC_Start_IT+0xdc>
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b04      	cmp	r3, #4
 8002844:	d104      	bne.n	8002850 <HAL_TIM_IC_Start_IT+0xc4>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	223f      	movs	r2, #63	@ 0x3f
 800284a:	2102      	movs	r1, #2
 800284c:	5499      	strb	r1, [r3, r2]
 800284e:	e00b      	b.n	8002868 <HAL_TIM_IC_Start_IT+0xdc>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d104      	bne.n	8002860 <HAL_TIM_IC_Start_IT+0xd4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2240      	movs	r2, #64	@ 0x40
 800285a:	2102      	movs	r1, #2
 800285c:	5499      	strb	r1, [r3, r2]
 800285e:	e003      	b.n	8002868 <HAL_TIM_IC_Start_IT+0xdc>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2241      	movs	r2, #65	@ 0x41
 8002864:	2102      	movs	r1, #2
 8002866:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d104      	bne.n	8002878 <HAL_TIM_IC_Start_IT+0xec>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2242      	movs	r2, #66	@ 0x42
 8002872:	2102      	movs	r1, #2
 8002874:	5499      	strb	r1, [r3, r2]
 8002876:	e013      	b.n	80028a0 <HAL_TIM_IC_Start_IT+0x114>
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b04      	cmp	r3, #4
 800287c:	d104      	bne.n	8002888 <HAL_TIM_IC_Start_IT+0xfc>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2243      	movs	r2, #67	@ 0x43
 8002882:	2102      	movs	r1, #2
 8002884:	5499      	strb	r1, [r3, r2]
 8002886:	e00b      	b.n	80028a0 <HAL_TIM_IC_Start_IT+0x114>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	2b08      	cmp	r3, #8
 800288c:	d104      	bne.n	8002898 <HAL_TIM_IC_Start_IT+0x10c>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2244      	movs	r2, #68	@ 0x44
 8002892:	2102      	movs	r1, #2
 8002894:	5499      	strb	r1, [r3, r2]
 8002896:	e003      	b.n	80028a0 <HAL_TIM_IC_Start_IT+0x114>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2245      	movs	r2, #69	@ 0x45
 800289c:	2102      	movs	r1, #2
 800289e:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b0c      	cmp	r3, #12
 80028a4:	d02a      	beq.n	80028fc <HAL_TIM_IC_Start_IT+0x170>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d830      	bhi.n	800290e <HAL_TIM_IC_Start_IT+0x182>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d01b      	beq.n	80028ea <HAL_TIM_IC_Start_IT+0x15e>
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	2b08      	cmp	r3, #8
 80028b6:	d82a      	bhi.n	800290e <HAL_TIM_IC_Start_IT+0x182>
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_TIM_IC_Start_IT+0x13a>
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d009      	beq.n	80028d8 <HAL_TIM_IC_Start_IT+0x14c>
 80028c4:	e023      	b.n	800290e <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2102      	movs	r1, #2
 80028d2:	430a      	orrs	r2, r1
 80028d4:	60da      	str	r2, [r3, #12]
      break;
 80028d6:	e01f      	b.n	8002918 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2104      	movs	r1, #4
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]
      break;
 80028e8:	e016      	b.n	8002918 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2108      	movs	r1, #8
 80028f6:	430a      	orrs	r2, r1
 80028f8:	60da      	str	r2, [r3, #12]
      break;
 80028fa:	e00d      	b.n	8002918 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2110      	movs	r1, #16
 8002908:	430a      	orrs	r2, r1
 800290a:	60da      	str	r2, [r3, #12]
      break;
 800290c:	e004      	b.n	8002918 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800290e:	230f      	movs	r3, #15
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
      break;
 8002916:	46c0      	nop			@ (mov r8, r8)
  }

  if (status == HAL_OK)
 8002918:	230f      	movs	r3, #15
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d130      	bne.n	8002984 <HAL_TIM_IC_Start_IT+0x1f8>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	2201      	movs	r2, #1
 800292a:	0018      	movs	r0, r3
 800292c:	f000 fe64 	bl	80035f8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a17      	ldr	r2, [pc, #92]	@ (8002994 <HAL_TIM_IC_Start_IT+0x208>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00a      	beq.n	8002950 <HAL_TIM_IC_Start_IT+0x1c4>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	05db      	lsls	r3, r3, #23
 8002942:	429a      	cmp	r2, r3
 8002944:	d004      	beq.n	8002950 <HAL_TIM_IC_Start_IT+0x1c4>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	@ (8002998 <HAL_TIM_IC_Start_IT+0x20c>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d111      	bne.n	8002974 <HAL_TIM_IC_Start_IT+0x1e8>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2207      	movs	r2, #7
 8002958:	4013      	ands	r3, r2
 800295a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b06      	cmp	r3, #6
 8002960:	d010      	beq.n	8002984 <HAL_TIM_IC_Start_IT+0x1f8>
      {
        __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2101      	movs	r1, #1
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002972:	e007      	b.n	8002984 <HAL_TIM_IC_Start_IT+0x1f8>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2101      	movs	r1, #1
 8002980:	430a      	orrs	r2, r1
 8002982:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			@ (mov r8, r8)
 8002994:	40012c00 	.word	0x40012c00
 8002998:	40000400 	.word	0x40000400

0800299c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d021      	beq.n	8002a00 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2202      	movs	r2, #2
 80029c0:	4013      	ands	r3, r2
 80029c2:	d01d      	beq.n	8002a00 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2203      	movs	r2, #3
 80029ca:	4252      	negs	r2, r2
 80029cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2203      	movs	r2, #3
 80029dc:	4013      	ands	r3, r2
 80029de:	d004      	beq.n	80029ea <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7fd ffbe 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 80029e8:	e007      	b.n	80029fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	0018      	movs	r0, r3
 80029ee:	f000 fa69 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 fa6d 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2204      	movs	r2, #4
 8002a04:	4013      	ands	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d01e      	beq.n	8002a4e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2205      	movs	r2, #5
 8002a16:	4252      	negs	r2, r2
 8002a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	23c0      	movs	r3, #192	@ 0xc0
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d004      	beq.n	8002a38 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7fd ff97 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 8002a36:	e007      	b.n	8002a48 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	f000 fa42 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	0018      	movs	r0, r3
 8002a44:	f000 fa46 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2208      	movs	r2, #8
 8002a52:	4013      	ands	r3, r2
 8002a54:	d021      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2208      	movs	r2, #8
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	d01d      	beq.n	8002a9a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2209      	movs	r2, #9
 8002a64:	4252      	negs	r2, r2
 8002a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	69db      	ldr	r3, [r3, #28]
 8002a74:	2203      	movs	r2, #3
 8002a76:	4013      	ands	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f7fd ff71 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 8002a82:	e007      	b.n	8002a94 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	0018      	movs	r0, r3
 8002a88:	f000 fa1c 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fa20 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d022      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2210      	movs	r2, #16
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	d01e      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2211      	movs	r2, #17
 8002ab0:	4252      	negs	r2, r2
 8002ab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2208      	movs	r2, #8
 8002ab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69da      	ldr	r2, [r3, #28]
 8002ac0:	23c0      	movs	r3, #192	@ 0xc0
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d004      	beq.n	8002ad2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7fd ff4a 	bl	8000964 <HAL_TIM_IC_CaptureCallback>
 8002ad0:	e007      	b.n	8002ae2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f000 f9f5 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	0018      	movs	r0, r3
 8002ade:	f000 f9f9 	bl	8002ed4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2201      	movs	r2, #1
 8002aec:	4013      	ands	r3, r2
 8002aee:	d00c      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	4013      	ands	r3, r2
 8002af6:	d008      	beq.n	8002b0a <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2202      	movs	r2, #2
 8002afe:	4252      	negs	r2, r2
 8002b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f9d5 	bl	8002eb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2280      	movs	r2, #128	@ 0x80
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00c      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2280      	movs	r2, #128	@ 0x80
 8002b16:	4013      	ands	r3, r2
 8002b18:	d008      	beq.n	8002b2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2281      	movs	r2, #129	@ 0x81
 8002b20:	4252      	negs	r2, r2
 8002b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fdea 	bl	8003700 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2240      	movs	r2, #64	@ 0x40
 8002b30:	4013      	ands	r3, r2
 8002b32:	d00c      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	4013      	ands	r3, r2
 8002b3a:	d008      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2241      	movs	r2, #65	@ 0x41
 8002b42:	4252      	negs	r2, r2
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f000 f9cb 	bl	8002ee4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2220      	movs	r2, #32
 8002b52:	4013      	ands	r3, r2
 8002b54:	d00c      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2220      	movs	r2, #32
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d008      	beq.n	8002b70 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2221      	movs	r2, #33	@ 0x21
 8002b64:	4252      	negs	r2, r2
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 fdc0 	bl	80036f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	46c0      	nop			@ (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b004      	add	sp, #16
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b84:	2317      	movs	r3, #23
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	2200      	movs	r2, #0
 8002b8a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	223c      	movs	r2, #60	@ 0x3c
 8002b90:	5c9b      	ldrb	r3, [r3, r2]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_TIM_IC_ConfigChannel+0x22>
 8002b96:	2302      	movs	r3, #2
 8002b98:	e08c      	b.n	8002cb4 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	223c      	movs	r2, #60	@ 0x3c
 8002b9e:	2101      	movs	r1, #1
 8002ba0:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d11b      	bne.n	8002be0 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8002bb8:	f000 fc00 	bl	80033bc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	210c      	movs	r1, #12
 8002bc8:	438a      	bics	r2, r1
 8002bca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6999      	ldr	r1, [r3, #24]
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	619a      	str	r2, [r3, #24]
 8002bde:	e062      	b.n	8002ca6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d11c      	bne.n	8002c20 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8002bf6:	f000 fc37 	bl	8003468 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	492d      	ldr	r1, [pc, #180]	@ (8002cbc <HAL_TIM_IC_ConfigChannel+0x144>)
 8002c06:	400a      	ands	r2, r1
 8002c08:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	6999      	ldr	r1, [r3, #24]
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	021a      	lsls	r2, r3, #8
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	619a      	str	r2, [r3, #24]
 8002c1e:	e042      	b.n	8002ca6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11b      	bne.n	8002c5e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8002c36:	f000 fc59 	bl	80034ec <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	69da      	ldr	r2, [r3, #28]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	210c      	movs	r1, #12
 8002c46:	438a      	bics	r2, r1
 8002c48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	69d9      	ldr	r1, [r3, #28]
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	61da      	str	r2, [r3, #28]
 8002c5c:	e023      	b.n	8002ca6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0c      	cmp	r3, #12
 8002c62:	d11c      	bne.n	8002c9e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8002c74:	f000 fc7a 	bl	800356c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	69da      	ldr	r2, [r3, #28]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	490e      	ldr	r1, [pc, #56]	@ (8002cbc <HAL_TIM_IC_ConfigChannel+0x144>)
 8002c84:	400a      	ands	r2, r1
 8002c86:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69d9      	ldr	r1, [r3, #28]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	021a      	lsls	r2, r3, #8
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	61da      	str	r2, [r3, #28]
 8002c9c:	e003      	b.n	8002ca6 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	223c      	movs	r2, #60	@ 0x3c
 8002caa:	2100      	movs	r1, #0
 8002cac:	5499      	strb	r1, [r3, r2]

  return status;
 8002cae:	2317      	movs	r3, #23
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	781b      	ldrb	r3, [r3, #0]
}
 8002cb4:	0018      	movs	r0, r3
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b006      	add	sp, #24
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	fffff3ff 	.word	0xfffff3ff

08002cc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ccc:	2317      	movs	r3, #23
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	223c      	movs	r2, #60	@ 0x3c
 8002cd8:	5c9b      	ldrb	r3, [r3, r2]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d101      	bne.n	8002ce2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002cde:	2302      	movs	r3, #2
 8002ce0:	e0ad      	b.n	8002e3e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	223c      	movs	r2, #60	@ 0x3c
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0c      	cmp	r3, #12
 8002cee:	d100      	bne.n	8002cf2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002cf0:	e076      	b.n	8002de0 <HAL_TIM_PWM_ConfigChannel+0x120>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2b0c      	cmp	r3, #12
 8002cf6:	d900      	bls.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002cf8:	e095      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d04e      	beq.n	8002d9e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d900      	bls.n	8002d08 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002d06:	e08e      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d021      	beq.n	8002d58 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002d14:	e087      	b.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	0011      	movs	r1, r2
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 f96c 	bl	8002ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	699a      	ldr	r2, [r3, #24]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2108      	movs	r1, #8
 8002d30:	430a      	orrs	r2, r1
 8002d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	699a      	ldr	r2, [r3, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2104      	movs	r1, #4
 8002d40:	438a      	bics	r2, r1
 8002d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6999      	ldr	r1, [r3, #24]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	691a      	ldr	r2, [r3, #16]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	619a      	str	r2, [r3, #24]
      break;
 8002d56:	e06b      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	68ba      	ldr	r2, [r7, #8]
 8002d5e:	0011      	movs	r1, r2
 8002d60:	0018      	movs	r0, r3
 8002d62:	f000 f9c9 	bl	80030f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2180      	movs	r1, #128	@ 0x80
 8002d72:	0109      	lsls	r1, r1, #4
 8002d74:	430a      	orrs	r2, r1
 8002d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699a      	ldr	r2, [r3, #24]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4931      	ldr	r1, [pc, #196]	@ (8002e48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6999      	ldr	r1, [r3, #24]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	021a      	lsls	r2, r3, #8
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	619a      	str	r2, [r3, #24]
      break;
 8002d9c:	e048      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68ba      	ldr	r2, [r7, #8]
 8002da4:	0011      	movs	r1, r2
 8002da6:	0018      	movs	r0, r3
 8002da8:	f000 fa24 	bl	80031f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2108      	movs	r1, #8
 8002db8:	430a      	orrs	r2, r1
 8002dba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69da      	ldr	r2, [r3, #28]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2104      	movs	r1, #4
 8002dc8:	438a      	bics	r2, r1
 8002dca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	69d9      	ldr	r1, [r3, #28]
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	61da      	str	r2, [r3, #28]
      break;
 8002dde:	e027      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	0011      	movs	r1, r2
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fa83 	bl	80032f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	69da      	ldr	r2, [r3, #28]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2180      	movs	r1, #128	@ 0x80
 8002dfa:	0109      	lsls	r1, r1, #4
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	490f      	ldr	r1, [pc, #60]	@ (8002e48 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002e0c:	400a      	ands	r2, r1
 8002e0e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69d9      	ldr	r1, [r3, #28]
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	691b      	ldr	r3, [r3, #16]
 8002e1a:	021a      	lsls	r2, r3, #8
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	61da      	str	r2, [r3, #28]
      break;
 8002e24:	e004      	b.n	8002e30 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002e26:	2317      	movs	r3, #23
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]
      break;
 8002e2e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	223c      	movs	r2, #60	@ 0x3c
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]

  return status;
 8002e38:	2317      	movs	r3, #23
 8002e3a:	18fb      	adds	r3, r7, r3
 8002e3c:	781b      	ldrb	r3, [r3, #0]
}
 8002e3e:	0018      	movs	r0, r3
 8002e40:	46bd      	mov	sp, r7
 8002e42:	b006      	add	sp, #24
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	46c0      	nop			@ (mov r8, r8)
 8002e48:	fffffbff 	.word	0xfffffbff

08002e4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b084      	sub	sp, #16
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d01e      	beq.n	8002e9e <HAL_TIM_ReadCapturedValue+0x52>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	2b0c      	cmp	r3, #12
 8002e64:	d820      	bhi.n	8002ea8 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	2b08      	cmp	r3, #8
 8002e6a:	d013      	beq.n	8002e94 <HAL_TIM_ReadCapturedValue+0x48>
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d81a      	bhi.n	8002ea8 <HAL_TIM_ReadCapturedValue+0x5c>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_TIM_ReadCapturedValue+0x34>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d005      	beq.n	8002e8a <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002e7e:	e013      	b.n	8002ea8 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e86:	60fb      	str	r3, [r7, #12]
      break;
 8002e88:	e00f      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	60fb      	str	r3, [r7, #12]
      break;
 8002e92:	e00a      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e9a:	60fb      	str	r3, [r7, #12]
      break;
 8002e9c:	e005      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	60fb      	str	r3, [r7, #12]
      break;
 8002ea6:	e000      	b.n	8002eaa <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002ea8:	46c0      	nop			@ (mov r8, r8)
  }

  return tmpreg;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	0018      	movs	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	b004      	add	sp, #16
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ebc:	46c0      	nop			@ (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b082      	sub	sp, #8
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ecc:	46c0      	nop			@ (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	b002      	add	sp, #8
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002edc:	46c0      	nop			@ (mov r8, r8)
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b002      	add	sp, #8
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eec:	46c0      	nop			@ (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b084      	sub	sp, #16
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a37      	ldr	r2, [pc, #220]	@ (8002fe4 <TIM_Base_SetConfig+0xf0>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d008      	beq.n	8002f1e <TIM_Base_SetConfig+0x2a>
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	05db      	lsls	r3, r3, #23
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d003      	beq.n	8002f1e <TIM_Base_SetConfig+0x2a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a33      	ldr	r2, [pc, #204]	@ (8002fe8 <TIM_Base_SetConfig+0xf4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d108      	bne.n	8002f30 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2270      	movs	r2, #112	@ 0x70
 8002f22:	4393      	bics	r3, r2
 8002f24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2c      	ldr	r2, [pc, #176]	@ (8002fe4 <TIM_Base_SetConfig+0xf0>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d014      	beq.n	8002f62 <TIM_Base_SetConfig+0x6e>
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	2380      	movs	r3, #128	@ 0x80
 8002f3c:	05db      	lsls	r3, r3, #23
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d00f      	beq.n	8002f62 <TIM_Base_SetConfig+0x6e>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a28      	ldr	r2, [pc, #160]	@ (8002fe8 <TIM_Base_SetConfig+0xf4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <TIM_Base_SetConfig+0x6e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a27      	ldr	r2, [pc, #156]	@ (8002fec <TIM_Base_SetConfig+0xf8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <TIM_Base_SetConfig+0x6e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a26      	ldr	r2, [pc, #152]	@ (8002ff0 <TIM_Base_SetConfig+0xfc>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_Base_SetConfig+0x6e>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a25      	ldr	r2, [pc, #148]	@ (8002ff4 <TIM_Base_SetConfig+0x100>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <TIM_Base_SetConfig+0x104>)
 8002f66:	4013      	ands	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2280      	movs	r2, #128	@ 0x80
 8002f78:	4393      	bics	r3, r2
 8002f7a:	001a      	movs	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a11      	ldr	r2, [pc, #68]	@ (8002fe4 <TIM_Base_SetConfig+0xf0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <TIM_Base_SetConfig+0xbe>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a12      	ldr	r2, [pc, #72]	@ (8002ff0 <TIM_Base_SetConfig+0xfc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d003      	beq.n	8002fb2 <TIM_Base_SetConfig+0xbe>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a11      	ldr	r2, [pc, #68]	@ (8002ff4 <TIM_Base_SetConfig+0x100>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d103      	bne.n	8002fba <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	691a      	ldr	r2, [r3, #16]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	001a      	movs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	611a      	str	r2, [r3, #16]
  }
}
 8002fda:	46c0      	nop			@ (mov r8, r8)
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	b004      	add	sp, #16
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	46c0      	nop			@ (mov r8, r8)
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40002000 	.word	0x40002000
 8002ff0:	40014400 	.word	0x40014400
 8002ff4:	40014800 	.word	0x40014800
 8002ff8:	fffffcff 	.word	0xfffffcff

08002ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	2201      	movs	r2, #1
 8003012:	4393      	bics	r3, r2
 8003014:	001a      	movs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2270      	movs	r2, #112	@ 0x70
 800302a:	4393      	bics	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2203      	movs	r2, #3
 8003032:	4393      	bics	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2202      	movs	r2, #2
 8003044:	4393      	bics	r3, r2
 8003046:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	4313      	orrs	r3, r2
 8003050:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a23      	ldr	r2, [pc, #140]	@ (80030e4 <TIM_OC1_SetConfig+0xe8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_OC1_SetConfig+0x6e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a22      	ldr	r2, [pc, #136]	@ (80030e8 <TIM_OC1_SetConfig+0xec>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_OC1_SetConfig+0x6e>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a21      	ldr	r2, [pc, #132]	@ (80030ec <TIM_OC1_SetConfig+0xf0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d10c      	bne.n	8003084 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	2208      	movs	r2, #8
 800306e:	4393      	bics	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4313      	orrs	r3, r2
 800307a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	2204      	movs	r2, #4
 8003080:	4393      	bics	r3, r2
 8003082:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <TIM_OC1_SetConfig+0xe8>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d007      	beq.n	800309c <TIM_OC1_SetConfig+0xa0>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <TIM_OC1_SetConfig+0xec>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d003      	beq.n	800309c <TIM_OC1_SetConfig+0xa0>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a15      	ldr	r2, [pc, #84]	@ (80030ec <TIM_OC1_SetConfig+0xf0>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d111      	bne.n	80030c0 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4a14      	ldr	r2, [pc, #80]	@ (80030f0 <TIM_OC1_SetConfig+0xf4>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4a13      	ldr	r2, [pc, #76]	@ (80030f4 <TIM_OC1_SetConfig+0xf8>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	695b      	ldr	r3, [r3, #20]
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	621a      	str	r2, [r3, #32]
}
 80030da:	46c0      	nop			@ (mov r8, r8)
 80030dc:	46bd      	mov	sp, r7
 80030de:	b006      	add	sp, #24
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	46c0      	nop			@ (mov r8, r8)
 80030e4:	40012c00 	.word	0x40012c00
 80030e8:	40014400 	.word	0x40014400
 80030ec:	40014800 	.word	0x40014800
 80030f0:	fffffeff 	.word	0xfffffeff
 80030f4:	fffffdff 	.word	0xfffffdff

080030f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b086      	sub	sp, #24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1b      	ldr	r3, [r3, #32]
 8003106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	2210      	movs	r2, #16
 800310e:	4393      	bics	r3, r2
 8003110:	001a      	movs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	4a2c      	ldr	r2, [pc, #176]	@ (80031d8 <TIM_OC2_SetConfig+0xe0>)
 8003126:	4013      	ands	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4a2b      	ldr	r2, [pc, #172]	@ (80031dc <TIM_OC2_SetConfig+0xe4>)
 800312e:	4013      	ands	r3, r2
 8003130:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	021b      	lsls	r3, r3, #8
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2220      	movs	r2, #32
 8003142:	4393      	bics	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	697a      	ldr	r2, [r7, #20]
 800314e:	4313      	orrs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a22      	ldr	r2, [pc, #136]	@ (80031e0 <TIM_OC2_SetConfig+0xe8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d10d      	bne.n	8003176 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	2280      	movs	r2, #128	@ 0x80
 800315e:	4393      	bics	r3, r2
 8003160:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	697a      	ldr	r2, [r7, #20]
 800316a:	4313      	orrs	r3, r2
 800316c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2240      	movs	r2, #64	@ 0x40
 8003172:	4393      	bics	r3, r2
 8003174:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a19      	ldr	r2, [pc, #100]	@ (80031e0 <TIM_OC2_SetConfig+0xe8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_OC2_SetConfig+0x96>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <TIM_OC2_SetConfig+0xec>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_OC2_SetConfig+0x96>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <TIM_OC2_SetConfig+0xf0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d113      	bne.n	80031b6 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <TIM_OC2_SetConfig+0xf4>)
 8003192:	4013      	ands	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	4a15      	ldr	r2, [pc, #84]	@ (80031f0 <TIM_OC2_SetConfig+0xf8>)
 800319a:	4013      	ands	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	693a      	ldr	r2, [r7, #16]
 80031ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68fa      	ldr	r2, [r7, #12]
 80031c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	685a      	ldr	r2, [r3, #4]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	621a      	str	r2, [r3, #32]
}
 80031d0:	46c0      	nop			@ (mov r8, r8)
 80031d2:	46bd      	mov	sp, r7
 80031d4:	b006      	add	sp, #24
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	ffff8fff 	.word	0xffff8fff
 80031dc:	fffffcff 	.word	0xfffffcff
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40014400 	.word	0x40014400
 80031e8:	40014800 	.word	0x40014800
 80031ec:	fffffbff 	.word	0xfffffbff
 80031f0:	fffff7ff 	.word	0xfffff7ff

080031f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b086      	sub	sp, #24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	4a31      	ldr	r2, [pc, #196]	@ (80032d0 <TIM_OC3_SetConfig+0xdc>)
 800320a:	401a      	ands	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2270      	movs	r2, #112	@ 0x70
 8003220:	4393      	bics	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2203      	movs	r2, #3
 8003228:	4393      	bics	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	4a26      	ldr	r2, [pc, #152]	@ (80032d4 <TIM_OC3_SetConfig+0xe0>)
 800323a:	4013      	ands	r3, r2
 800323c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	021b      	lsls	r3, r3, #8
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a22      	ldr	r2, [pc, #136]	@ (80032d8 <TIM_OC3_SetConfig+0xe4>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10d      	bne.n	800326e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	4a21      	ldr	r2, [pc, #132]	@ (80032dc <TIM_OC3_SetConfig+0xe8>)
 8003256:	4013      	ands	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	021b      	lsls	r3, r3, #8
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	4313      	orrs	r3, r2
 8003264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	4a1d      	ldr	r2, [pc, #116]	@ (80032e0 <TIM_OC3_SetConfig+0xec>)
 800326a:	4013      	ands	r3, r2
 800326c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a19      	ldr	r2, [pc, #100]	@ (80032d8 <TIM_OC3_SetConfig+0xe4>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d007      	beq.n	8003286 <TIM_OC3_SetConfig+0x92>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <TIM_OC3_SetConfig+0xf0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d003      	beq.n	8003286 <TIM_OC3_SetConfig+0x92>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a19      	ldr	r2, [pc, #100]	@ (80032e8 <TIM_OC3_SetConfig+0xf4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d113      	bne.n	80032ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4a18      	ldr	r2, [pc, #96]	@ (80032ec <TIM_OC3_SetConfig+0xf8>)
 800328a:	4013      	ands	r3, r2
 800328c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	4a17      	ldr	r2, [pc, #92]	@ (80032f0 <TIM_OC3_SetConfig+0xfc>)
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4313      	orrs	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	693a      	ldr	r2, [r7, #16]
 80032b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	697a      	ldr	r2, [r7, #20]
 80032c6:	621a      	str	r2, [r3, #32]
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b006      	add	sp, #24
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	fffffeff 	.word	0xfffffeff
 80032d4:	fffffdff 	.word	0xfffffdff
 80032d8:	40012c00 	.word	0x40012c00
 80032dc:	fffff7ff 	.word	0xfffff7ff
 80032e0:	fffffbff 	.word	0xfffffbff
 80032e4:	40014400 	.word	0x40014400
 80032e8:	40014800 	.word	0x40014800
 80032ec:	ffffefff 	.word	0xffffefff
 80032f0:	ffffdfff 	.word	0xffffdfff

080032f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a1b      	ldr	r3, [r3, #32]
 8003302:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a24      	ldr	r2, [pc, #144]	@ (800339c <TIM_OC4_SetConfig+0xa8>)
 800330a:	401a      	ands	r2, r3
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a20      	ldr	r2, [pc, #128]	@ (80033a0 <TIM_OC4_SetConfig+0xac>)
 8003320:	4013      	ands	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4a1f      	ldr	r2, [pc, #124]	@ (80033a4 <TIM_OC4_SetConfig+0xb0>)
 8003328:	4013      	ands	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	68fa      	ldr	r2, [r7, #12]
 8003334:	4313      	orrs	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	4a1b      	ldr	r2, [pc, #108]	@ (80033a8 <TIM_OC4_SetConfig+0xb4>)
 800333c:	4013      	ands	r3, r2
 800333e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	031b      	lsls	r3, r3, #12
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a17      	ldr	r2, [pc, #92]	@ (80033ac <TIM_OC4_SetConfig+0xb8>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <TIM_OC4_SetConfig+0x70>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a16      	ldr	r2, [pc, #88]	@ (80033b0 <TIM_OC4_SetConfig+0xbc>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC4_SetConfig+0x70>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a15      	ldr	r2, [pc, #84]	@ (80033b4 <TIM_OC4_SetConfig+0xc0>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d109      	bne.n	8003378 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	4a14      	ldr	r2, [pc, #80]	@ (80033b8 <TIM_OC4_SetConfig+0xc4>)
 8003368:	4013      	ands	r3, r2
 800336a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	4313      	orrs	r3, r2
 8003376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	621a      	str	r2, [r3, #32]
}
 8003392:	46c0      	nop			@ (mov r8, r8)
 8003394:	46bd      	mov	sp, r7
 8003396:	b006      	add	sp, #24
 8003398:	bd80      	pop	{r7, pc}
 800339a:	46c0      	nop			@ (mov r8, r8)
 800339c:	ffffefff 	.word	0xffffefff
 80033a0:	ffff8fff 	.word	0xffff8fff
 80033a4:	fffffcff 	.word	0xfffffcff
 80033a8:	ffffdfff 	.word	0xffffdfff
 80033ac:	40012c00 	.word	0x40012c00
 80033b0:	40014400 	.word	0x40014400
 80033b4:	40014800 	.word	0x40014800
 80033b8:	ffffbfff 	.word	0xffffbfff

080033bc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
 80033c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a1b      	ldr	r3, [r3, #32]
 80033d4:	2201      	movs	r2, #1
 80033d6:	4393      	bics	r3, r2
 80033d8:	001a      	movs	r2, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003460 <TIM_TI1_SetConfig+0xa4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d008      	beq.n	80033fe <TIM_TI1_SetConfig+0x42>
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	05db      	lsls	r3, r3, #23
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d003      	beq.n	80033fe <TIM_TI1_SetConfig+0x42>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003464 <TIM_TI1_SetConfig+0xa8>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d101      	bne.n	8003402 <TIM_TI1_SetConfig+0x46>
 80033fe:	2301      	movs	r3, #1
 8003400:	e000      	b.n	8003404 <TIM_TI1_SetConfig+0x48>
 8003402:	2300      	movs	r3, #0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	2203      	movs	r2, #3
 800340c:	4393      	bics	r3, r2
 800340e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e003      	b.n	8003422 <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2201      	movs	r2, #1
 800341e:	4313      	orrs	r3, r2
 8003420:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	22f0      	movs	r2, #240	@ 0xf0
 8003426:	4393      	bics	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	22ff      	movs	r2, #255	@ 0xff
 8003430:	4013      	ands	r3, r2
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	220a      	movs	r2, #10
 800343c:	4393      	bics	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	220a      	movs	r2, #10
 8003444:	4013      	ands	r3, r2
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	621a      	str	r2, [r3, #32]
}
 8003458:	46c0      	nop			@ (mov r8, r8)
 800345a:	46bd      	mov	sp, r7
 800345c:	b006      	add	sp, #24
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40000400 	.word	0x40000400

08003468 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	2210      	movs	r2, #16
 8003482:	4393      	bics	r3, r2
 8003484:	001a      	movs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4a14      	ldr	r2, [pc, #80]	@ (80034e4 <TIM_TI2_SetConfig+0x7c>)
 8003494:	4013      	ands	r3, r2
 8003496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	021b      	lsls	r3, r3, #8
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4a10      	ldr	r2, [pc, #64]	@ (80034e8 <TIM_TI2_SetConfig+0x80>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	031b      	lsls	r3, r3, #12
 80034ae:	041b      	lsls	r3, r3, #16
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	22a0      	movs	r2, #160	@ 0xa0
 80034bc:	4393      	bics	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	22a0      	movs	r2, #160	@ 0xa0
 80034c6:	4013      	ands	r3, r2
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	697a      	ldr	r2, [r7, #20]
 80034d8:	621a      	str	r2, [r3, #32]
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b006      	add	sp, #24
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			@ (mov r8, r8)
 80034e4:	fffffcff 	.word	0xfffffcff
 80034e8:	ffff0fff 	.word	0xffff0fff

080034ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
 80034f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	4a17      	ldr	r2, [pc, #92]	@ (8003564 <TIM_TI3_SetConfig+0x78>)
 8003506:	401a      	ands	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	69db      	ldr	r3, [r3, #28]
 8003510:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	2203      	movs	r2, #3
 8003516:	4393      	bics	r3, r2
 8003518:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	22f0      	movs	r2, #240	@ 0xf0
 8003526:	4393      	bics	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	22ff      	movs	r2, #255	@ 0xff
 8003530:	4013      	ands	r3, r2
 8003532:	693a      	ldr	r2, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	4a0b      	ldr	r2, [pc, #44]	@ (8003568 <TIM_TI3_SetConfig+0x7c>)
 800353c:	4013      	ands	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	021a      	lsls	r2, r3, #8
 8003544:	23a0      	movs	r3, #160	@ 0xa0
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4013      	ands	r3, r2
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	693a      	ldr	r2, [r7, #16]
 8003554:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	621a      	str	r2, [r3, #32]
}
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	46bd      	mov	sp, r7
 8003560:	b006      	add	sp, #24
 8003562:	bd80      	pop	{r7, pc}
 8003564:	fffffeff 	.word	0xfffffeff
 8003568:	fffff5ff 	.word	0xfffff5ff

0800356c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
 8003578:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	4a18      	ldr	r2, [pc, #96]	@ (80035e8 <TIM_TI4_SetConfig+0x7c>)
 8003586:	401a      	ands	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	4a15      	ldr	r2, [pc, #84]	@ (80035ec <TIM_TI4_SetConfig+0x80>)
 8003596:	4013      	ands	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	021b      	lsls	r3, r3, #8
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4a12      	ldr	r2, [pc, #72]	@ (80035f0 <TIM_TI4_SetConfig+0x84>)
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	031b      	lsls	r3, r3, #12
 80035b0:	041b      	lsls	r3, r3, #16
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a0d      	ldr	r2, [pc, #52]	@ (80035f4 <TIM_TI4_SetConfig+0x88>)
 80035be:	4013      	ands	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	031a      	lsls	r2, r3, #12
 80035c6:	23a0      	movs	r3, #160	@ 0xa0
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	4013      	ands	r3, r2
 80035cc:	697a      	ldr	r2, [r7, #20]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	697a      	ldr	r2, [r7, #20]
 80035dc:	621a      	str	r2, [r3, #32]
}
 80035de:	46c0      	nop			@ (mov r8, r8)
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b006      	add	sp, #24
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	ffffefff 	.word	0xffffefff
 80035ec:	fffffcff 	.word	0xfffffcff
 80035f0:	ffff0fff 	.word	0xffff0fff
 80035f4:	ffff5fff 	.word	0xffff5fff

080035f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	221f      	movs	r2, #31
 8003608:	4013      	ands	r3, r2
 800360a:	2201      	movs	r2, #1
 800360c:	409a      	lsls	r2, r3
 800360e:	0013      	movs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	43d2      	mvns	r2, r2
 800361a:	401a      	ands	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a1a      	ldr	r2, [r3, #32]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	211f      	movs	r1, #31
 8003628:	400b      	ands	r3, r1
 800362a:	6879      	ldr	r1, [r7, #4]
 800362c:	4099      	lsls	r1, r3
 800362e:	000b      	movs	r3, r1
 8003630:	431a      	orrs	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
}
 8003636:	46c0      	nop			@ (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b006      	add	sp, #24
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	223c      	movs	r2, #60	@ 0x3c
 800364e:	5c9b      	ldrb	r3, [r3, r2]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003654:	2302      	movs	r3, #2
 8003656:	e042      	b.n	80036de <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	223c      	movs	r2, #60	@ 0x3c
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	223d      	movs	r2, #61	@ 0x3d
 8003664:	2102      	movs	r1, #2
 8003666:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2270      	movs	r2, #112	@ 0x70
 800367c:	4393      	bics	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a14      	ldr	r2, [pc, #80]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00a      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	2380      	movs	r3, #128	@ 0x80
 80036a2:	05db      	lsls	r3, r3, #23
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d004      	beq.n	80036b2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a0f      	ldr	r2, [pc, #60]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d10c      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	2280      	movs	r2, #128	@ 0x80
 80036b6:	4393      	bics	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68ba      	ldr	r2, [r7, #8]
 80036ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	223d      	movs	r2, #61	@ 0x3d
 80036d0:	2101      	movs	r1, #1
 80036d2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	223c      	movs	r2, #60	@ 0x3c
 80036d8:	2100      	movs	r1, #0
 80036da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	0018      	movs	r0, r3
 80036e0:	46bd      	mov	sp, r7
 80036e2:	b004      	add	sp, #16
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40000400 	.word	0x40000400

080036f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f8:	46c0      	nop			@ (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003708:	46c0      	nop			@ (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <memset>:
 8003710:	0003      	movs	r3, r0
 8003712:	1882      	adds	r2, r0, r2
 8003714:	4293      	cmp	r3, r2
 8003716:	d100      	bne.n	800371a <memset+0xa>
 8003718:	4770      	bx	lr
 800371a:	7019      	strb	r1, [r3, #0]
 800371c:	3301      	adds	r3, #1
 800371e:	e7f9      	b.n	8003714 <memset+0x4>

08003720 <__libc_init_array>:
 8003720:	b570      	push	{r4, r5, r6, lr}
 8003722:	2600      	movs	r6, #0
 8003724:	4c0c      	ldr	r4, [pc, #48]	@ (8003758 <__libc_init_array+0x38>)
 8003726:	4d0d      	ldr	r5, [pc, #52]	@ (800375c <__libc_init_array+0x3c>)
 8003728:	1b64      	subs	r4, r4, r5
 800372a:	10a4      	asrs	r4, r4, #2
 800372c:	42a6      	cmp	r6, r4
 800372e:	d109      	bne.n	8003744 <__libc_init_array+0x24>
 8003730:	2600      	movs	r6, #0
 8003732:	f000 f819 	bl	8003768 <_init>
 8003736:	4c0a      	ldr	r4, [pc, #40]	@ (8003760 <__libc_init_array+0x40>)
 8003738:	4d0a      	ldr	r5, [pc, #40]	@ (8003764 <__libc_init_array+0x44>)
 800373a:	1b64      	subs	r4, r4, r5
 800373c:	10a4      	asrs	r4, r4, #2
 800373e:	42a6      	cmp	r6, r4
 8003740:	d105      	bne.n	800374e <__libc_init_array+0x2e>
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	00b3      	lsls	r3, r6, #2
 8003746:	58eb      	ldr	r3, [r5, r3]
 8003748:	4798      	blx	r3
 800374a:	3601      	adds	r6, #1
 800374c:	e7ee      	b.n	800372c <__libc_init_array+0xc>
 800374e:	00b3      	lsls	r3, r6, #2
 8003750:	58eb      	ldr	r3, [r5, r3]
 8003752:	4798      	blx	r3
 8003754:	3601      	adds	r6, #1
 8003756:	e7f2      	b.n	800373e <__libc_init_array+0x1e>
 8003758:	080037b0 	.word	0x080037b0
 800375c:	080037b0 	.word	0x080037b0
 8003760:	080037b4 	.word	0x080037b4
 8003764:	080037b0 	.word	0x080037b0

08003768 <_init>:
 8003768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800376a:	46c0      	nop			@ (mov r8, r8)
 800376c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376e:	bc08      	pop	{r3}
 8003770:	469e      	mov	lr, r3
 8003772:	4770      	bx	lr

08003774 <_fini>:
 8003774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800377a:	bc08      	pop	{r3}
 800377c:	469e      	mov	lr, r3
 800377e:	4770      	bx	lr
